<?php

/**
 * PHP library used for interacting with Fortigate firewall (FortiOS) configuration API (Configuration).
 * @author Benjamin Clerc <contact@benjamin-clerc.com>
 * @copyright Copyright (c) 2021, Benjamin Clerc.
 * @license MIT
 * @link https://github.com/benclerc/Fortinet-FortiOSAPI
 */

namespace Fortinet\FortiOSAPI;

use stdClass;

/**
 * FortiOS API Configuration
 * @link https://fndn.fortinet.net/ Fortinet developer ressource center.
 */
class Configuration extends FortiOSAPI
{
	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /alertemail/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAlertemailSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/alertemail/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /alertemail/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAlertemailSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/alertemail/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /antivirus/heuristic
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAntivirusHeuristic(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/antivirus/heuristic', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /antivirus/heuristic
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAntivirusHeuristic(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/antivirus/heuristic', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /antivirus/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAntivirusProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/antivirus/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /antivirus/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAntivirusProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/antivirus/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /antivirus/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteAntivirusProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/antivirus/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /antivirus/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAntivirusProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/antivirus/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /antivirus/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addAntivirusProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/antivirus/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /antivirus/quarantine
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAntivirusQuarantine(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/antivirus/quarantine', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /antivirus/quarantine
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAntivirusQuarantine(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/antivirus/quarantine', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /antivirus/settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAntivirusSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/antivirus/settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /antivirus/settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAntivirusSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/antivirus/settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/custom/{tag}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $tag mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getApplicationCustom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $tag
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/custom', $tag, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /application/custom/{tag}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $tag mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateApplicationCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $tag
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/application/custom', $tag, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /application/custom/{tag}
	 * @param  $tag mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteApplicationCustom(string $tag, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/application/custom', $tag, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/custom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllApplicationCustom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/custom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /application/custom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addApplicationCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/application/custom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getApplicationGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /application/group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateApplicationGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/application/group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /application/group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteApplicationGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/application/group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllApplicationGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /application/group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addApplicationGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/application/group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getApplicationList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /application/list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateApplicationList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/application/list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /application/list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteApplicationList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/application/list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllApplicationList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /application/list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addApplicationList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/application/list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/name/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getApplicationName(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/name', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /application/name/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateApplicationName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/application/name', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /application/name/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteApplicationName(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/application/name', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/name
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllApplicationName(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/name', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /application/name
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addApplicationName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/application/name', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/rule-settings/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getApplicationRuleSettings(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/rule-settings', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /application/rule-settings/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateApplicationRuleSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/application/rule-settings', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /application/rule-settings/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteApplicationRuleSettings(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/application/rule-settings', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /application/rule-settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllApplicationRuleSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/application/rule-settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /application/rule-settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addApplicationRuleSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/application/rule-settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /authentication/rule/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAuthenticationRule(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/authentication/rule', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /authentication/rule/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAuthenticationRule(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/authentication/rule', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /authentication/rule/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteAuthenticationRule(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/authentication/rule', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /authentication/rule
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAuthenticationRule(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/authentication/rule', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /authentication/rule
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addAuthenticationRule(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/authentication/rule', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /authentication/scheme/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAuthenticationScheme(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/authentication/scheme', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /authentication/scheme/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAuthenticationScheme(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/authentication/scheme', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /authentication/scheme/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteAuthenticationScheme(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/authentication/scheme', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /authentication/scheme
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAuthenticationScheme(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/authentication/scheme', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /authentication/scheme
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addAuthenticationScheme(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/authentication/scheme', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /authentication/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllAuthenticationSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/authentication/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /authentication/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateAuthenticationSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/authentication/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/ca/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getCertificateCa(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/ca', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /certificate/ca/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateCertificateCa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/certificate/ca', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /certificate/ca/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteCertificateCa(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/certificate/ca', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/ca
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllCertificateCa(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/ca', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /certificate/ca
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addCertificateCa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/certificate/ca', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/crl/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getCertificateCrl(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/crl', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /certificate/crl/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateCertificateCrl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/certificate/crl', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /certificate/crl/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteCertificateCrl(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/certificate/crl', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/crl
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllCertificateCrl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/crl', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /certificate/crl
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addCertificateCrl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/certificate/crl', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/local/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getCertificateLocal(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/local', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /certificate/local/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateCertificateLocal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/certificate/local', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /certificate/local/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteCertificateLocal(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/certificate/local', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/local
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllCertificateLocal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/local', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /certificate/local
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addCertificateLocal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/certificate/local', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/remote/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getCertificateRemote(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/remote', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /certificate/remote/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateCertificateRemote(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/certificate/remote', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /certificate/remote/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteCertificateRemote(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/certificate/remote', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /certificate/remote
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllCertificateRemote(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/certificate/remote', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /certificate/remote
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addCertificateRemote(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/certificate/remote', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /credential-store/domain-controller/{server-name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $serverName mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getCredentialStoreDomainController(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $serverName
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/credential-store/domain-controller', $serverName, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /credential-store/domain-controller/{server-name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $serverName mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateCredentialStoreDomainController(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $serverName
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/credential-store/domain-controller', $serverName, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /credential-store/domain-controller/{server-name}
	 * @param  $serverName mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteCredentialStoreDomainController(string $serverName, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/credential-store/domain-controller', $serverName, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /credential-store/domain-controller
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllCredentialStoreDomainController(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/credential-store/domain-controller', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /credential-store/domain-controller
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addCredentialStoreDomainController(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/credential-store/domain-controller', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/filepattern/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getDlpFilepattern(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/filepattern', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dlp/filepattern/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDlpFilepattern(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dlp/filepattern', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /dlp/filepattern/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteDlpFilepattern(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/dlp/filepattern', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/filepattern
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDlpFilepattern(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/filepattern', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /dlp/filepattern
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addDlpFilepattern(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/dlp/filepattern', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/fp-doc-source/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getDlpFpDocSource(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/fp-doc-source', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dlp/fp-doc-source/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDlpFpDocSource(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dlp/fp-doc-source', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /dlp/fp-doc-source/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteDlpFpDocSource(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/dlp/fp-doc-source', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/fp-doc-source
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDlpFpDocSource(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/fp-doc-source', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /dlp/fp-doc-source
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addDlpFpDocSource(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/dlp/fp-doc-source', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/sensitivity/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getDlpSensitivity(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/sensitivity', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dlp/sensitivity/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDlpSensitivity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dlp/sensitivity', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /dlp/sensitivity/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteDlpSensitivity(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/dlp/sensitivity', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/sensitivity
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDlpSensitivity(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/sensitivity', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /dlp/sensitivity
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addDlpSensitivity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/dlp/sensitivity', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/sensor/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getDlpSensor(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/sensor', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dlp/sensor/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDlpSensor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dlp/sensor', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /dlp/sensor/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteDlpSensor(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/dlp/sensor', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/sensor
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDlpSensor(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/sensor', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /dlp/sensor
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addDlpSensor(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/dlp/sensor', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dlp/settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDlpSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dlp/settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dlp/settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDlpSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dlp/settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dnsfilter/domain-filter/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getDnsfilterDomainFilter(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dnsfilter/domain-filter', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dnsfilter/domain-filter/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDnsfilterDomainFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dnsfilter/domain-filter', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /dnsfilter/domain-filter/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteDnsfilterDomainFilter(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/dnsfilter/domain-filter', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dnsfilter/domain-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDnsfilterDomainFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dnsfilter/domain-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /dnsfilter/domain-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addDnsfilterDomainFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/dnsfilter/domain-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dnsfilter/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getDnsfilterProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dnsfilter/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /dnsfilter/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateDnsfilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/dnsfilter/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /dnsfilter/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteDnsfilterProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/dnsfilter/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /dnsfilter/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllDnsfilterProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/dnsfilter/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /dnsfilter/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addDnsfilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/dnsfilter/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/bwl/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEmailfilterBwl(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/bwl', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/bwl/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterBwl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/bwl', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /emailfilter/bwl/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEmailfilterBwl(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/emailfilter/bwl', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/bwl
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterBwl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/bwl', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /emailfilter/bwl
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEmailfilterBwl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/emailfilter/bwl', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/bword/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEmailfilterBword(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/bword', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/bword/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterBword(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/bword', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /emailfilter/bword/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEmailfilterBword(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/emailfilter/bword', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/bword
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterBword(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/bword', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /emailfilter/bword
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEmailfilterBword(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/emailfilter/bword', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/dnsbl/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEmailfilterDnsbl(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/dnsbl', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/dnsbl/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterDnsbl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/dnsbl', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /emailfilter/dnsbl/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEmailfilterDnsbl(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/emailfilter/dnsbl', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/dnsbl
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterDnsbl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/dnsbl', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /emailfilter/dnsbl
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEmailfilterDnsbl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/emailfilter/dnsbl', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/fortishield
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterFortishield(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/fortishield', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/fortishield
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterFortishield(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/fortishield', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/iptrust/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEmailfilterIptrust(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/iptrust', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/iptrust/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterIptrust(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/iptrust', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /emailfilter/iptrust/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEmailfilterIptrust(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/emailfilter/iptrust', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/iptrust
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterIptrust(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/iptrust', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /emailfilter/iptrust
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEmailfilterIptrust(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/emailfilter/iptrust', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/mheader/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEmailfilterMheader(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/mheader', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/mheader/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterMheader(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/mheader', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /emailfilter/mheader/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEmailfilterMheader(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/emailfilter/mheader', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/mheader
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterMheader(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/mheader', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /emailfilter/mheader
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEmailfilterMheader(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/emailfilter/mheader', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/options
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterOptions(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/options', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/options
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterOptions(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/options', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEmailfilterProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /emailfilter/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEmailfilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/emailfilter/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /emailfilter/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEmailfilterProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/emailfilter/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /emailfilter/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEmailfilterProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/emailfilter/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /emailfilter/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEmailfilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/emailfilter/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /endpoint-control/fctems/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getEndpointControlFctems(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/endpoint-control/fctems', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /endpoint-control/fctems/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateEndpointControlFctems(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/endpoint-control/fctems', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /endpoint-control/fctems/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteEndpointControlFctems(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/endpoint-control/fctems', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /endpoint-control/fctems
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllEndpointControlFctems(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/endpoint-control/fctems', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /endpoint-control/fctems
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addEndpointControlFctems(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/endpoint-control/fctems', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /extender-controller/dataplan/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getExtenderControllerDataplan(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/extender-controller/dataplan', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /extender-controller/dataplan/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateExtenderControllerDataplan(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/extender-controller/dataplan', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /extender-controller/dataplan/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteExtenderControllerDataplan(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/extender-controller/dataplan', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /extender-controller/dataplan
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllExtenderControllerDataplan(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/extender-controller/dataplan', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /extender-controller/dataplan
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addExtenderControllerDataplan(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/extender-controller/dataplan', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /extender-controller/extender/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getExtenderControllerExtender(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/extender-controller/extender', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /extender-controller/extender/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateExtenderControllerExtender(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/extender-controller/extender', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /extender-controller/extender/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteExtenderControllerExtender(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/extender-controller/extender', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /extender-controller/extender
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllExtenderControllerExtender(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/extender-controller/extender', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /extender-controller/extender
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addExtenderControllerExtender(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/extender-controller/extender', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /file-filter/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFileFilterProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/file-filter/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /file-filter/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFileFilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/file-filter/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /file-filter/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFileFilterProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/file-filter/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /file-filter/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFileFilterProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/file-filter/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /file-filter/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFileFilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/file-filter/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ipmacbinding/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallIpmacbindingSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ipmacbinding/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ipmacbinding/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallIpmacbindingSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ipmacbinding/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ipmacbinding/table/{seq-num}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallIpmacbindingTable(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ipmacbinding/table', $seqNum, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ipmacbinding/table/{seq-num}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallIpmacbindingTable(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ipmacbinding/table', $seqNum, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.ipmacbinding/table/{seq-num}
	 * @param  $seqNum mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallIpmacbindingTable(int $seqNum, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.ipmacbinding/table', $seqNum, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ipmacbinding/table
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallIpmacbindingTable(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ipmacbinding/table', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.ipmacbinding/table
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallIpmacbindingTable(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.ipmacbinding/table', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.schedule/group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallScheduleGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.schedule/group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.schedule/group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallScheduleGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.schedule/group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.schedule/group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallScheduleGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.schedule/group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.schedule/group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallScheduleGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.schedule/group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.schedule/group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallScheduleGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.schedule/group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.schedule/onetime/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallScheduleOnetime(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.schedule/onetime', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.schedule/onetime/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallScheduleOnetime(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.schedule/onetime', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.schedule/onetime/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallScheduleOnetime(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.schedule/onetime', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.schedule/onetime
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallScheduleOnetime(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.schedule/onetime', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.schedule/onetime
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallScheduleOnetime(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.schedule/onetime', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.schedule/recurring/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallScheduleRecurring(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.schedule/recurring', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.schedule/recurring/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallScheduleRecurring(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.schedule/recurring', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.schedule/recurring/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallScheduleRecurring(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.schedule/recurring', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.schedule/recurring
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallScheduleRecurring(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.schedule/recurring', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.schedule/recurring
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallScheduleRecurring(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.schedule/recurring', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.service/category/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallServiceCategory(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.service/category', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.service/category/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallServiceCategory(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.service/category', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.service/category/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallServiceCategory(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.service/category', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.service/category
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallServiceCategory(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.service/category', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.service/category
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallServiceCategory(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.service/category', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.service/custom/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallServiceCustom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.service/custom', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.service/custom/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallServiceCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.service/custom', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.service/custom/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallServiceCustom(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.service/custom', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.service/custom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallServiceCustom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.service/custom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.service/custom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallServiceCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.service/custom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.service/group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallServiceGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.service/group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.service/group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallServiceGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.service/group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.service/group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallServiceGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.service/group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.service/group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallServiceGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.service/group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.service/group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallServiceGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.service/group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.shaper/per-ip-shaper/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallShaperPerIpShaper(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.shaper/per-ip-shaper', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.shaper/per-ip-shaper/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallShaperPerIpShaper(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.shaper/per-ip-shaper', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.shaper/per-ip-shaper/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallShaperPerIpShaper(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.shaper/per-ip-shaper', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.shaper/per-ip-shaper
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallShaperPerIpShaper(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.shaper/per-ip-shaper', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.shaper/per-ip-shaper
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallShaperPerIpShaper(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.shaper/per-ip-shaper', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.shaper/traffic-shaper/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallShaperTrafficShaper(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.shaper/traffic-shaper', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.shaper/traffic-shaper/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallShaperTrafficShaper(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.shaper/traffic-shaper', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.shaper/traffic-shaper/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallShaperTrafficShaper(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.shaper/traffic-shaper', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.shaper/traffic-shaper
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallShaperTrafficShaper(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.shaper/traffic-shaper', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.shaper/traffic-shaper
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallShaperTrafficShaper(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.shaper/traffic-shaper', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/host-key/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSshHostKey(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/host-key', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ssh/host-key/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSshHostKey(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ssh/host-key', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.ssh/host-key/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSshHostKey(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.ssh/host-key', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/host-key
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSshHostKey(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/host-key', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.ssh/host-key
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSshHostKey(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.ssh/host-key', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/local-ca/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSshLocalCa(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/local-ca', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ssh/local-ca/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSshLocalCa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ssh/local-ca', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.ssh/local-ca/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSshLocalCa(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.ssh/local-ca', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/local-ca
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSshLocalCa(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/local-ca', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.ssh/local-ca
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSshLocalCa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.ssh/local-ca', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/local-key/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSshLocalKey(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/local-key', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ssh/local-key/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSshLocalKey(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ssh/local-key', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.ssh/local-key/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSshLocalKey(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.ssh/local-key', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/local-key
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSshLocalKey(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/local-key', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.ssh/local-key
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSshLocalKey(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.ssh/local-key', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssh/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSshSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssh/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ssh/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSshSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ssh/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.ssl/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSslSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.ssl/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.ssl/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSslSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.ssl/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.wildcard-fqdn/custom/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallWildcardfqdnCustom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.wildcard-fqdn/custom', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.wildcard-fqdn/custom/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallWildcardfqdnCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.wildcard-fqdn/custom', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.wildcard-fqdn/custom/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallWildcardfqdnCustom(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.wildcard-fqdn/custom', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.wildcard-fqdn/custom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallWildcardfqdnCustom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.wildcard-fqdn/custom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.wildcard-fqdn/custom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallWildcardfqdnCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.wildcard-fqdn/custom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.wildcard-fqdn/group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallWildcardfqdnGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.wildcard-fqdn/group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall.wildcard-fqdn/group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallWildcardfqdnGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall.wildcard-fqdn/group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall.wildcard-fqdn/group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallWildcardfqdnGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall.wildcard-fqdn/group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall.wildcard-fqdn/group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallWildcardfqdnGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall.wildcard-fqdn/group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall.wildcard-fqdn/group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallWildcardfqdnGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall.wildcard-fqdn/group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/DoS-policy/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallDosPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/DoS-policy', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/DoS-policy/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallDosPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/DoS-policy', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/DoS-policy/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallDosPolicy(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/DoS-policy', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/DoS-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallDosPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/DoS-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/DoS-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallDosPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/DoS-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/DoS-policy6/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallDosPolicy6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/DoS-policy6', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/DoS-policy6/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallDosPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/DoS-policy6', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/DoS-policy6/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallDosPolicy6(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/DoS-policy6', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/DoS-policy6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallDosPolicy6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/DoS-policy6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/DoS-policy6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallDosPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/DoS-policy6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/acl/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAcl(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/acl', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/acl/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAcl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/acl', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/acl/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAcl(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/acl', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/acl
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAcl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/acl', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/acl
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAcl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/acl', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/acl6/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAcl6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/acl6', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/acl6/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAcl6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/acl6', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/acl6/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAcl6(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/acl6', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/acl6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAcl6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/acl6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/acl6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAcl6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/acl6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/address/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAddress(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/address', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/address/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/address', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/address/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAddress(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/address', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/address
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAddress(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/address', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/address
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/address', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/address6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAddress6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/address6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/address6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAddress6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/address6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/address6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAddress6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/address6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/address6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAddress6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/address6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/address6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAddress6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/address6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/address6-template/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAddress6Template(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/address6-template', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/address6-template/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAddress6Template(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/address6-template', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/address6-template/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAddress6Template(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/address6-template', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/address6-template
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAddress6Template(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/address6-template', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/address6-template
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAddress6Template(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/address6-template', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/addrgrp/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAddrgrp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/addrgrp', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/addrgrp/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAddrgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/addrgrp', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/addrgrp/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAddrgrp(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/addrgrp', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/addrgrp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAddrgrp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/addrgrp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/addrgrp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAddrgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/addrgrp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/addrgrp6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallAddrgrp6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/addrgrp6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/addrgrp6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAddrgrp6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/addrgrp6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/addrgrp6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallAddrgrp6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/addrgrp6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/addrgrp6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAddrgrp6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/addrgrp6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/addrgrp6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallAddrgrp6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/addrgrp6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/auth-portal
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallAuthPortal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/auth-portal', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/auth-portal
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallAuthPortal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/auth-portal', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/central-snat-map/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallCentralSnatMap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/central-snat-map', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/central-snat-map/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallCentralSnatMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/central-snat-map', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/central-snat-map/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallCentralSnatMap(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/central-snat-map', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/central-snat-map
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallCentralSnatMap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/central-snat-map', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/central-snat-map
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallCentralSnatMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/central-snat-map', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/city/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallCity(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/city', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/city/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallCity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/city', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/city/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallCity(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/city', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/city
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallCity(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/city', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/city
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallCity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/city', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/country/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallCountry(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/country', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/country/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallCountry(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/country', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/country/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallCountry(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/country', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/country
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallCountry(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/country', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/country
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallCountry(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/country', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/decrypted-traffic-mirror/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallDecryptedTrafficMirror(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/decrypted-traffic-mirror', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/decrypted-traffic-mirror/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallDecryptedTrafficMirror(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/decrypted-traffic-mirror', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/decrypted-traffic-mirror/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallDecryptedTrafficMirror(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/decrypted-traffic-mirror', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/decrypted-traffic-mirror
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallDecryptedTrafficMirror(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/decrypted-traffic-mirror', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/decrypted-traffic-mirror
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallDecryptedTrafficMirror(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/decrypted-traffic-mirror', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/dnstranslation/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallDnstranslation(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/dnstranslation', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/dnstranslation/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallDnstranslation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/dnstranslation', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/dnstranslation/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallDnstranslation(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/dnstranslation', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/dnstranslation
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallDnstranslation(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/dnstranslation', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/dnstranslation
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallDnstranslation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/dnstranslation', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/identity-based-route/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallIdentityBasedRoute(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/identity-based-route', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/identity-based-route/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallIdentityBasedRoute(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/identity-based-route', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/identity-based-route/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallIdentityBasedRoute(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/identity-based-route', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/identity-based-route
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallIdentityBasedRoute(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/identity-based-route', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/identity-based-route
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallIdentityBasedRoute(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/identity-based-route', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/interface-policy/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInterfacePolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/interface-policy', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/interface-policy/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInterfacePolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/interface-policy', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/interface-policy/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInterfacePolicy(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/interface-policy', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/interface-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInterfacePolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/interface-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/interface-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInterfacePolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/interface-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/interface-policy6/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInterfacePolicy6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/interface-policy6', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/interface-policy6/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInterfacePolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/interface-policy6', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/interface-policy6/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInterfacePolicy6(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/interface-policy6', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/interface-policy6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInterfacePolicy6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/interface-policy6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/interface-policy6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInterfacePolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/interface-policy6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetService(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetService(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetService(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetService(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetService(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-addition/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceAddition(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-addition', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-addition/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceAddition(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-addition', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-addition/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceAddition(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-addition', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-addition
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceAddition(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-addition', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-addition
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceAddition(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-addition', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-append
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceAppend(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-append', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-append
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceAppend(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-append', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-botnet/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceBotnet(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-botnet', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-botnet/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceBotnet(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-botnet', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-botnet/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceBotnet(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-botnet', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-botnet
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceBotnet(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-botnet', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-botnet
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceBotnet(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-botnet', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-custom/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceCustom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-custom', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-custom/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-custom', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-custom/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceCustom(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-custom', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-custom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceCustom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-custom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-custom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-custom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-custom-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceCustomGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-custom-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-custom-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceCustomGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-custom-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-custom-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceCustomGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-custom-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-custom-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceCustomGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-custom-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-custom-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceCustomGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-custom-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-definition/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceDefinition(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-definition', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-definition/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceDefinition(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-definition', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-definition/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceDefinition(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-definition', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-definition
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceDefinition(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-definition', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-definition
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceDefinition(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-definition', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-extension/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceExtension(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-extension', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-extension/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceExtension(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-extension', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-extension/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceExtension(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-extension', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-extension
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceExtension(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-extension', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-extension
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceExtension(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-extension', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-ipbl-reason/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceIpblReason(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-ipbl-reason', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-ipbl-reason/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceIpblReason(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-ipbl-reason', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-ipbl-reason/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceIpblReason(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-ipbl-reason', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-ipbl-reason
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceIpblReason(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-ipbl-reason', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-ipbl-reason
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceIpblReason(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-ipbl-reason', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-ipbl-vendor/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceIpblVendor(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-ipbl-vendor', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-ipbl-vendor/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceIpblVendor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-ipbl-vendor', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-ipbl-vendor/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceIpblVendor(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-ipbl-vendor', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-ipbl-vendor
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceIpblVendor(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-ipbl-vendor', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-ipbl-vendor
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceIpblVendor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-ipbl-vendor', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-list/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-list', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-list/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-list', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-list/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceList(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-list', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-name/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceName(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-name', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-name/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-name', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-name/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceName(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-name', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-name
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceName(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-name', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-name
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-name', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-owner/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceOwner(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-owner', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-owner/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceOwner(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-owner', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-owner/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceOwner(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-owner', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-owner
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceOwner(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-owner', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-owner
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceOwner(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-owner', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-reputation/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceReputation(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-reputation', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-reputation/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceReputation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-reputation', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-reputation/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceReputation(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-reputation', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-reputation
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceReputation(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-reputation', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-reputation
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceReputation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-reputation', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-sld/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallInternetServiceSld(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-sld', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/internet-service-sld/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallInternetServiceSld(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/internet-service-sld', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/internet-service-sld/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallInternetServiceSld(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/internet-service-sld', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/internet-service-sld
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallInternetServiceSld(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/internet-service-sld', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/internet-service-sld
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallInternetServiceSld(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/internet-service-sld', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ip-translation/{transid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $transid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallIpTranslation(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $transid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ip-translation', $transid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ip-translation/{transid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $transid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallIpTranslation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $transid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ip-translation', $transid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ip-translation/{transid}
	 * @param  $transid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallIpTranslation(int $transid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ip-translation', $transid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ip-translation
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallIpTranslation(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ip-translation', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ip-translation
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallIpTranslation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ip-translation', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ippool/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallIppool(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ippool', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ippool/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallIppool(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ippool', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ippool/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallIppool(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ippool', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ippool
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallIppool(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ippool', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ippool
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallIppool(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ippool', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ippool6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallIppool6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ippool6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ippool6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallIppool6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ippool6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ippool6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallIppool6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ippool6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ippool6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallIppool6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ippool6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ippool6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallIppool6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ippool6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ldb-monitor/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallLdbMonitor(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ldb-monitor', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ldb-monitor/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallLdbMonitor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ldb-monitor', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ldb-monitor/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallLdbMonitor(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ldb-monitor', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ldb-monitor
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallLdbMonitor(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ldb-monitor', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ldb-monitor
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallLdbMonitor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ldb-monitor', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/local-in-policy/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallLocalInPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/local-in-policy', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/local-in-policy/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallLocalInPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/local-in-policy', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/local-in-policy/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallLocalInPolicy(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/local-in-policy', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/local-in-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallLocalInPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/local-in-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/local-in-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallLocalInPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/local-in-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/local-in-policy6/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallLocalInPolicy6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/local-in-policy6', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/local-in-policy6/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallLocalInPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/local-in-policy6', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/local-in-policy6/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallLocalInPolicy6(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/local-in-policy6', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/local-in-policy6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallLocalInPolicy6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/local-in-policy6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/local-in-policy6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallLocalInPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/local-in-policy6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-address/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallMulticastAddress(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-address', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/multicast-address/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallMulticastAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/multicast-address', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/multicast-address/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallMulticastAddress(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/multicast-address', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-address
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallMulticastAddress(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-address', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/multicast-address
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallMulticastAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/multicast-address', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-address6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallMulticastAddress6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-address6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/multicast-address6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallMulticastAddress6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/multicast-address6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/multicast-address6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallMulticastAddress6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/multicast-address6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-address6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallMulticastAddress6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-address6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/multicast-address6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallMulticastAddress6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/multicast-address6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-policy/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallMulticastPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-policy', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/multicast-policy/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallMulticastPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/multicast-policy', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/multicast-policy/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallMulticastPolicy(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/multicast-policy', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallMulticastPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/multicast-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallMulticastPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/multicast-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-policy6/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallMulticastPolicy6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-policy6', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/multicast-policy6/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallMulticastPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/multicast-policy6', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/multicast-policy6/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallMulticastPolicy6(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/multicast-policy6', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/multicast-policy6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallMulticastPolicy6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/multicast-policy6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/multicast-policy6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallMulticastPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/multicast-policy6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/policy/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/policy', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/policy/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/policy', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/policy/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallPolicy(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/policy', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/policy46/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallPolicy46(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/policy46', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/policy46/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallPolicy46(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/policy46', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/policy46/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallPolicy46(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/policy46', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/policy46
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallPolicy46(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/policy46', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/policy46
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallPolicy46(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/policy46', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/policy64/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallPolicy64(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/policy64', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/policy64/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallPolicy64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/policy64', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/policy64/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallPolicy64(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/policy64', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/policy64
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallPolicy64(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/policy64', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/policy64
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallPolicy64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/policy64', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/profile-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallProfileGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/profile-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/profile-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallProfileGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/profile-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/profile-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallProfileGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/profile-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/profile-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallProfileGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/profile-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/profile-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallProfileGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/profile-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/profile-protocol-options/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallProfileProtocolOptions(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/profile-protocol-options', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/profile-protocol-options/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallProfileProtocolOptions(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/profile-protocol-options', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/profile-protocol-options/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallProfileProtocolOptions(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/profile-protocol-options', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/profile-protocol-options
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallProfileProtocolOptions(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/profile-protocol-options', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/profile-protocol-options
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallProfileProtocolOptions(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/profile-protocol-options', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/proxy-address/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallProxyAddress(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/proxy-address', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/proxy-address/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallProxyAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/proxy-address', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/proxy-address/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallProxyAddress(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/proxy-address', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/proxy-address
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallProxyAddress(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/proxy-address', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/proxy-address
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallProxyAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/proxy-address', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/proxy-addrgrp/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallProxyAddrgrp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/proxy-addrgrp', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/proxy-addrgrp/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallProxyAddrgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/proxy-addrgrp', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/proxy-addrgrp/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallProxyAddrgrp(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/proxy-addrgrp', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/proxy-addrgrp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallProxyAddrgrp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/proxy-addrgrp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/proxy-addrgrp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallProxyAddrgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/proxy-addrgrp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/proxy-policy/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallProxyPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/proxy-policy', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/proxy-policy/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallProxyPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/proxy-policy', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/proxy-policy/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallProxyPolicy(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/proxy-policy', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/proxy-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallProxyPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/proxy-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/proxy-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallProxyPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/proxy-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/region/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallRegion(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/region', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/region/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallRegion(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/region', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/region/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallRegion(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/region', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/region
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallRegion(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/region', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/region
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallRegion(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/region', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/security-policy/{policyid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSecurityPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/security-policy', $policyid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/security-policy/{policyid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $policyid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSecurityPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $policyid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/security-policy', $policyid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/security-policy/{policyid}
	 * @param  $policyid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSecurityPolicy(int $policyid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/security-policy', $policyid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/security-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSecurityPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/security-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/security-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSecurityPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/security-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/shaping-policy/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallShapingPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/shaping-policy', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/shaping-policy/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallShapingPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/shaping-policy', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/shaping-policy/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallShapingPolicy(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/shaping-policy', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/shaping-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallShapingPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/shaping-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/shaping-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallShapingPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/shaping-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/shaping-profile/{profile-name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $profileName mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallShapingProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $profileName
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/shaping-profile', $profileName, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/shaping-profile/{profile-name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $profileName mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallShapingProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $profileName
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/shaping-profile', $profileName, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/shaping-profile/{profile-name}
	 * @param  $profileName mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallShapingProfile(string $profileName, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/shaping-profile', $profileName, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/shaping-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallShapingProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/shaping-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/shaping-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallShapingProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/shaping-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /firewall/sniffer/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSniffer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/sniffer', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /firewall/sniffer/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSniffer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/sniffer', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /firewall/sniffer/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSniffer(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/sniffer', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /firewall/sniffer
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSniffer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/sniffer', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /firewall/sniffer
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSniffer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/sniffer', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ssl-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSslServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ssl-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ssl-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSslServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ssl-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ssl-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSslServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ssl-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ssl-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSslServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ssl-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ssl-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSslServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ssl-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ssl-ssh-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallSslSshProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ssl-ssh-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ssl-ssh-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallSslSshProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ssl-ssh-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ssl-ssh-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallSslSshProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ssl-ssh-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ssl-ssh-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallSslSshProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ssl-ssh-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ssl-ssh-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallSslSshProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ssl-ssh-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/traffic-class/{class-id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $classId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallTrafficClass(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $classId
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/traffic-class', $classId, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/traffic-class/{class-id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $classId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallTrafficClass(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $classId
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/traffic-class', $classId, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/traffic-class/{class-id}
	 * @param  $classId mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallTrafficClass(int $classId, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/traffic-class', $classId, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/traffic-class
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallTrafficClass(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/traffic-class', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/traffic-class
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallTrafficClass(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/traffic-class', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ttl-policy/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallTtlPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ttl-policy', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/ttl-policy/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallTtlPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/ttl-policy', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/ttl-policy/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallTtlPolicy(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/ttl-policy', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/ttl-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallTtlPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/ttl-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/ttl-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallTtlPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/ttl-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vendor-mac/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVendorMac(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vendor-mac', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vendor-mac/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVendorMac(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vendor-mac', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vendor-mac/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVendorMac(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vendor-mac', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vendor-mac
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVendorMac(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vendor-mac', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vendor-mac
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVendorMac(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vendor-mac', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vendor-mac-summary
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVendorMacSummary(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vendor-mac-summary', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vendor-mac-summary
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVendorMacSummary(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vendor-mac-summary', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVip(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vip/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVip(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vip', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vip/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVip(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vip', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVip(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vip
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVip(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vip', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip46/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVip46(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip46', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vip46/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVip46(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vip46', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vip46/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVip46(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vip46', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip46
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVip46(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip46', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vip46
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVip46(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vip46', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVip6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vip6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVip6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vip6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vip6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVip6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vip6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVip6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vip6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVip6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vip6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip64/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVip64(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip64', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vip64/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVip64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vip64', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vip64/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVip64(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vip64', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vip64
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVip64(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vip64', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vip64
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVip64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vip64', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVipgrp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vipgrp/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVipgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vipgrp', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vipgrp/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVipgrp(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vipgrp', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVipgrp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vipgrp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVipgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vipgrp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp46/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVipgrp46(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp46', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vipgrp46/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVipgrp46(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vipgrp46', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vipgrp46/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVipgrp46(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vipgrp46', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp46
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVipgrp46(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp46', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vipgrp46
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVipgrp46(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vipgrp46', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVipgrp6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vipgrp6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVipgrp6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vipgrp6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vipgrp6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVipgrp6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vipgrp6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVipgrp6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vipgrp6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVipgrp6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vipgrp6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp64/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getFirewallVipgrp64(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp64', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: fwgrp
	 * @route  PUT /firewall/vipgrp64/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFirewallVipgrp64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/firewall/vipgrp64', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: fwgrp
	 * @route  DELETE /firewall/vipgrp64/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteFirewallVipgrp64(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/firewall/vipgrp64', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: fwgrp
	 * @route  GET /firewall/vipgrp64
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFirewallVipgrp64(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/firewall/vipgrp64', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: fwgrp
	 * @route  POST /firewall/vipgrp64
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addFirewallVipgrp64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/firewall/vipgrp64', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /ftp-proxy/explicit
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllFtpProxyExplicit(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ftp-proxy/explicit', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /ftp-proxy/explicit
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateFtpProxyExplicit(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ftp-proxy/explicit', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /icap/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIcapProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/icap/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /icap/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIcapProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/icap/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /icap/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIcapProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/icap/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /icap/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIcapProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/icap/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /icap/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIcapProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/icap/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /icap/server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIcapServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/icap/server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /icap/server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIcapServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/icap/server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /icap/server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIcapServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/icap/server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /icap/server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIcapServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/icap/server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /icap/server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIcapServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/icap/server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/custom/{tag}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $tag mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIpsCustom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $tag
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/custom', $tag, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/custom/{tag}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $tag mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $tag
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/custom', $tag, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ips/custom/{tag}
	 * @param  $tag mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIpsCustom(string $tag, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ips/custom', $tag, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/custom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsCustom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/custom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ips/custom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIpsCustom(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/ips/custom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/decoder/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIpsDecoder(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/decoder', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/decoder/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsDecoder(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/decoder', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ips/decoder/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIpsDecoder(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ips/decoder', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/decoder
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsDecoder(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/decoder', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ips/decoder
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIpsDecoder(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/ips/decoder', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/global
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsGlobal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/global', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/global
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsGlobal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/global', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/rule/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIpsRule(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/rule', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/rule/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsRule(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/rule', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ips/rule/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIpsRule(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ips/rule', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/rule
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsRule(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/rule', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ips/rule
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIpsRule(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/ips/rule', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/rule-settings/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIpsRuleSettings(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/rule-settings', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/rule-settings/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsRuleSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/rule-settings', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ips/rule-settings/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIpsRuleSettings(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ips/rule-settings', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/rule-settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsRuleSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/rule-settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ips/rule-settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIpsRuleSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/ips/rule-settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/sensor/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIpsSensor(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/sensor', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/sensor/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsSensor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/sensor', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ips/sensor/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIpsSensor(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ips/sensor', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/sensor
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsSensor(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/sensor', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ips/sensor
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIpsSensor(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/ips/sensor', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/view-map/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getIpsViewMap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/view-map', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ips/view-map/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateIpsViewMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ips/view-map', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ips/view-map/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteIpsViewMap(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ips/view-map', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ips/view-map
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllIpsViewMap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ips/view-map', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ips/view-map
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addIpsViewMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/ips/view-map', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.disk/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogDiskFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.disk/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.disk/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogDiskFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.disk/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.disk/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogDiskSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.disk/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.disk/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogDiskSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.disk/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer-cloud/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzercloudFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer-cloud/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer-cloud/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzercloudFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer-cloud/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer-cloud/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzercloudOverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer-cloud/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer-cloud/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzercloudOverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer-cloud/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer-cloud/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzercloudOverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer-cloud/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer-cloud/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzercloudOverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer-cloud/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer-cloud/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzercloudSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer-cloud/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer-cloud/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzercloudSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer-cloud/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzerFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzerFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzerOverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzerOverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzerOverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzerOverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzerSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzerSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer2/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer2Filter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer2/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer2/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer2Filter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer2/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer2/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer2OverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer2/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer2/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer2OverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer2/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer2/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer2OverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer2/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer2/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer2OverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer2/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer2/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer2Setting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer2/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer2/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer2Setting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer2/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer3/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer3Filter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer3/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer3/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer3Filter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer3/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortianalyzer3/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer3OverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer3/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortianalyzer3/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer3OverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer3/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer3/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer3OverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer3/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer3/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer3OverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer3/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /log.fortianalyzer3/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortianalyzer3Setting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortianalyzer3/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /log.fortianalyzer3/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortianalyzer3Setting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortianalyzer3/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortiguard/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortiguardFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortiguard/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortiguard/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortiguardFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortiguard/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortiguard/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortiguardOverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortiguard/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortiguard/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortiguardOverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortiguard/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortiguard/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortiguardOverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortiguard/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortiguard/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortiguardOverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortiguard/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.fortiguard/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogFortiguardSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.fortiguard/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.fortiguard/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogFortiguardSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.fortiguard/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.memory/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogMemoryFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.memory/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.memory/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogMemoryFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.memory/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.memory/global-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogMemoryGlobalSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.memory/global-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.memory/global-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogMemoryGlobalSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.memory/global-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.memory/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogMemorySetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.memory/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.memory/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogMemorySetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.memory/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.null-device/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogNulldeviceFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.null-device/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.null-device/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogNulldeviceFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.null-device/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.null-device/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogNulldeviceSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.null-device/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.null-device/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogNulldeviceSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.null-device/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogdFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogdFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogdOverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogdOverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogdOverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogdOverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogdSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogdSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd2/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd2Filter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd2/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd2/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd2Filter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd2/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd2/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd2OverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd2/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd2/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd2OverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd2/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd2/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd2OverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd2/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd2/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd2OverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd2/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd2/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd2Setting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd2/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd2/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd2Setting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd2/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd3/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd3Filter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd3/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd3/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd3Filter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd3/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd3/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd3OverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd3/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd3/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd3OverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd3/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd3/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd3OverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd3/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd3/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd3OverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd3/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd3/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd3Setting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd3/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd3/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd3Setting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd3/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd4/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd4Filter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd4/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd4/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd4Filter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd4/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd4/override-filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd4OverrideFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd4/override-filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd4/override-filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd4OverrideFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd4/override-filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd4/override-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd4OverrideSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd4/override-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd4/override-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd4OverrideSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd4/override-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.syslogd4/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSyslogd4Setting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.syslogd4/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.syslogd4/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSyslogd4Setting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.syslogd4/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.webtrends/filter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogWebtrendsFilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.webtrends/filter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.webtrends/filter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogWebtrendsFilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.webtrends/filter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log.webtrends/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogWebtrendsSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log.webtrends/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log.webtrends/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogWebtrendsSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log.webtrends/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log/custom-field/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getLogCustomField(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log/custom-field', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log/custom-field/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogCustomField(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log/custom-field', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: loggrp
	 * @route  DELETE /log/custom-field/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteLogCustomField(string $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/log/custom-field', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log/custom-field
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogCustomField(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log/custom-field', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: loggrp
	 * @route  POST /log/custom-field
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addLogCustomField(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/log/custom-field', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log/eventfilter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogEventfilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log/eventfilter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log/eventfilter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogEventfilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log/eventfilter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log/gui-display
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogGuiDisplay(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log/gui-display', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log/gui-display
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogGuiDisplay(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log/gui-display', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /log/threat-weight
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllLogThreatWeight(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/log/threat-weight', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /log/threat-weight
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateLogThreatWeight(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/log/threat-weight', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/chart/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getReportChart(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/chart', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /report/chart/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateReportChart(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/report/chart', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: loggrp
	 * @route  DELETE /report/chart/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteReportChart(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/report/chart', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/chart
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllReportChart(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/chart', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: loggrp
	 * @route  POST /report/chart
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addReportChart(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/report/chart', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/dataset/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getReportDataset(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/dataset', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /report/dataset/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateReportDataset(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/report/dataset', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: loggrp
	 * @route  DELETE /report/dataset/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteReportDataset(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/report/dataset', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/dataset
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllReportDataset(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/dataset', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: loggrp
	 * @route  POST /report/dataset
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addReportDataset(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/report/dataset', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/layout/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getReportLayout(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/layout', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /report/layout/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateReportLayout(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/report/layout', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: loggrp
	 * @route  DELETE /report/layout/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteReportLayout(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/report/layout', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/layout
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllReportLayout(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/layout', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: loggrp
	 * @route  POST /report/layout
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addReportLayout(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/report/layout', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllReportSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /report/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateReportSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/report/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/style/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getReportStyle(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/style', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /report/style/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateReportStyle(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/report/style', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: loggrp
	 * @route  DELETE /report/style/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteReportStyle(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/report/style', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/style
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllReportStyle(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/style', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: loggrp
	 * @route  POST /report/style
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addReportStyle(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/report/style', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/theme/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getReportTheme(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/theme', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /report/theme/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateReportTheme(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/report/theme', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: loggrp
	 * @route  DELETE /report/theme/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteReportTheme(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/report/theme', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /report/theme
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllReportTheme(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/report/theme', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: loggrp
	 * @route  POST /report/theme
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addReportTheme(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/report/theme', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/access-list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterAccessList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/access-list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/access-list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterAccessList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/access-list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/access-list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterAccessList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/access-list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/access-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterAccessList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/access-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/access-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterAccessList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/access-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/access-list6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterAccessList6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/access-list6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/access-list6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterAccessList6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/access-list6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/access-list6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterAccessList6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/access-list6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/access-list6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterAccessList6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/access-list6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/access-list6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterAccessList6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/access-list6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/aspath-list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterAspathList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/aspath-list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/aspath-list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterAspathList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/aspath-list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/aspath-list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterAspathList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/aspath-list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/aspath-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterAspathList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/aspath-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/aspath-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterAspathList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/aspath-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/auth-path/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterAuthPath(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/auth-path', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/auth-path/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterAuthPath(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/auth-path', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/auth-path/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterAuthPath(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/auth-path', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/auth-path
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterAuthPath(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/auth-path', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/auth-path
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterAuthPath(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/auth-path', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/bfd
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterBfd(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/bfd', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/bfd
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterBfd(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/bfd', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/bfd6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterBfd6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/bfd6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/bfd6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterBfd6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/bfd6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/bgp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterBgp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/bgp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/bgp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterBgp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/bgp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/community-list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterCommunityList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/community-list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/community-list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterCommunityList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/community-list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/community-list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterCommunityList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/community-list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/community-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterCommunityList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/community-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/community-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterCommunityList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/community-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/isis
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterIsis(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/isis', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/isis
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterIsis(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/isis', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/key-chain/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterKeyChain(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/key-chain', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/key-chain/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterKeyChain(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/key-chain', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/key-chain/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterKeyChain(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/key-chain', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/key-chain
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterKeyChain(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/key-chain', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/key-chain
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterKeyChain(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/key-chain', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/multicast
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterMulticast(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/multicast', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/multicast
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterMulticast(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/multicast', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/multicast-flow/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterMulticastFlow(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/multicast-flow', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/multicast-flow/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterMulticastFlow(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/multicast-flow', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/multicast-flow/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterMulticastFlow(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/multicast-flow', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/multicast-flow
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterMulticastFlow(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/multicast-flow', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/multicast-flow
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterMulticastFlow(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/multicast-flow', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/multicast6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterMulticast6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/multicast6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/multicast6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterMulticast6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/multicast6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/ospf
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterOspf(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/ospf', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/ospf
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterOspf(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/ospf', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/ospf6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterOspf6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/ospf6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/ospf6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterOspf6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/ospf6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/policy/{seq-num}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/policy', $seqNum, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/policy/{seq-num}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/policy', $seqNum, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/policy/{seq-num}
	 * @param  $seqNum mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterPolicy(int $seqNum, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/policy', $seqNum, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/policy6/{seq-num}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterPolicy6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/policy6', $seqNum, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/policy6/{seq-num}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/policy6', $seqNum, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/policy6/{seq-num}
	 * @param  $seqNum mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterPolicy6(int $seqNum, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/policy6', $seqNum, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/policy6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterPolicy6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/policy6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/policy6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterPolicy6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/policy6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/prefix-list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterPrefixList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/prefix-list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/prefix-list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterPrefixList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/prefix-list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/prefix-list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterPrefixList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/prefix-list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/prefix-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterPrefixList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/prefix-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/prefix-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterPrefixList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/prefix-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/prefix-list6/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterPrefixList6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/prefix-list6', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/prefix-list6/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterPrefixList6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/prefix-list6', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/prefix-list6/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterPrefixList6(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/prefix-list6', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/prefix-list6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterPrefixList6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/prefix-list6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/prefix-list6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterPrefixList6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/prefix-list6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/rip
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterRip(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/rip', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/rip
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterRip(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/rip', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/ripng
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterRipng(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/ripng', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/ripng
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterRipng(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/ripng', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/route-map/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterRouteMap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/route-map', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/route-map/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterRouteMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/route-map', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/route-map/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterRouteMap(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/route-map', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/route-map
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterRouteMap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/route-map', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/route-map
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterRouteMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/route-map', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/static/{seq-num}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterStatic(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/static', $seqNum, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/static/{seq-num}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterStatic(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/static', $seqNum, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/static/{seq-num}
	 * @param  $seqNum mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterStatic(int $seqNum, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/static', $seqNum, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/static
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterStatic(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/static', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/static
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterStatic(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/static', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/static6/{seq-num}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getRouterStatic6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/static6', $seqNum, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /router/static6/{seq-num}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $seqNum mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateRouterStatic6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $seqNum
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/router/static6', $seqNum, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /router/static6/{seq-num}
	 * @param  $seqNum mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteRouterStatic6(int $seqNum, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/router/static6', $seqNum, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /router/static6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllRouterStatic6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/router/static6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /router/static6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addRouterStatic6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/router/static6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ssh-filter/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSshFilterProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ssh-filter/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /ssh-filter/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSshFilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/ssh-filter/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /ssh-filter/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSshFilterProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/ssh-filter/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /ssh-filter/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSshFilterProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/ssh-filter/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /ssh-filter/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSshFilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/ssh-filter/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller.auto-config/default
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchcontrollerAutoconfigDefault(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller.auto-config/default', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller.auto-config/default
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchcontrollerAutoconfigDefault(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller.auto-config/default', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller.initial-config/template/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchcontrollerInitialconfigTemplate(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller.initial-config/template', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller.initial-config/template/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchcontrollerInitialconfigTemplate(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller.initial-config/template', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller.initial-config/template/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchcontrollerInitialconfigTemplate(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller.initial-config/template', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller.initial-config/template
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchcontrollerInitialconfigTemplate(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller.initial-config/template', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller.initial-config/template
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchcontrollerInitialconfigTemplate(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller.initial-config/template', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller.initial-config/vlans
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchcontrollerInitialconfigVlans(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller.initial-config/vlans', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller.initial-config/vlans
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchcontrollerInitialconfigVlans(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller.initial-config/vlans', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller.security-policy/802-1X/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchcontrollerSecuritypolicy8021x(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller.security-policy/802-1X', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller.security-policy/802-1X/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchcontrollerSecuritypolicy8021x(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller.security-policy/802-1X', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller.security-policy/802-1X/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchcontrollerSecuritypolicy8021x(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller.security-policy/802-1X', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller.security-policy/802-1X
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchcontrollerSecuritypolicy8021x(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller.security-policy/802-1X', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller.security-policy/802-1X
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchcontrollerSecuritypolicy8021x(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller.security-policy/802-1X', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/global
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerGlobal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/global', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/global
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerGlobal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/global', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/lldp-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerLldpProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/lldp-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/lldp-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerLldpProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/lldp-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/lldp-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerLldpProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/lldp-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/lldp-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerLldpProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/lldp-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/lldp-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerLldpProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/lldp-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/lldp-settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerLldpSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/lldp-settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/lldp-settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerLldpSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/lldp-settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/location/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerLocation(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/location', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/location/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerLocation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/location', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/location/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerLocation(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/location', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/location
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerLocation(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/location', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/location
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerLocation(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/location', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/mac-policy/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerMacPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/mac-policy', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/mac-policy/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerMacPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/mac-policy', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/mac-policy/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerMacPolicy(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/mac-policy', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/mac-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerMacPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/mac-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/mac-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerMacPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/mac-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/managed-switch/{switch-id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $switchId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerManagedSwitch(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $switchId
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/managed-switch', $switchId, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/managed-switch/{switch-id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $switchId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerManagedSwitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $switchId
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/managed-switch', $switchId, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/managed-switch/{switch-id}
	 * @param  $switchId mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerManagedSwitch(string $switchId, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/managed-switch', $switchId, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/managed-switch
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerManagedSwitch(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/managed-switch', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/managed-switch
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerManagedSwitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/managed-switch', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/nac-device/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerNacDevice(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/nac-device', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/nac-device/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerNacDevice(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/nac-device', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/nac-device/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerNacDevice(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/nac-device', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/nac-device
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerNacDevice(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/nac-device', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/nac-device
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerNacDevice(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/nac-device', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/nac-settings/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerNacSettings(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/nac-settings', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/nac-settings/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerNacSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/nac-settings', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/nac-settings/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerNacSettings(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/nac-settings', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/nac-settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerNacSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/nac-settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/nac-settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerNacSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/nac-settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/port-policy/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerPortPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/port-policy', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/port-policy/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerPortPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/port-policy', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/port-policy/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerPortPolicy(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/port-policy', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/port-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerPortPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/port-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/port-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerPortPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/port-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/snmp-community/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerSnmpCommunity(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/snmp-community', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/snmp-community/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerSnmpCommunity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/snmp-community', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/snmp-community/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerSnmpCommunity(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/snmp-community', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/snmp-community
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerSnmpCommunity(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/snmp-community', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/snmp-community
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerSnmpCommunity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/snmp-community', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/stp-instance/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerStpInstance(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/stp-instance', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/stp-instance/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerStpInstance(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/stp-instance', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/stp-instance/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerStpInstance(string $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/stp-instance', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/stp-instance
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerStpInstance(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/stp-instance', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/stp-instance
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerStpInstance(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/stp-instance', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/stp-settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerStpSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/stp-settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/stp-settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerStpSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/stp-settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/switch-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerSwitchGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/switch-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/switch-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerSwitchGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/switch-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/switch-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerSwitchGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/switch-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/switch-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerSwitchGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/switch-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/switch-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerSwitchGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/switch-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/system
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerSystem(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/system', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/system
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerSystem(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/system', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/vlan-policy/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSwitchControllerVlanPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/vlan-policy', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /switch-controller/vlan-policy/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSwitchControllerVlanPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/switch-controller/vlan-policy', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /switch-controller/vlan-policy/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSwitchControllerVlanPolicy(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/switch-controller/vlan-policy', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /switch-controller/vlan-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSwitchControllerVlanPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/switch-controller/vlan-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /switch-controller/vlan-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSwitchControllerVlanPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/switch-controller/vlan-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.3g-modem/custom/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystem3gmodemCustom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.3g-modem/custom', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.3g-modem/custom/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystem3gmodemCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.3g-modem/custom', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.3g-modem/custom/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystem3gmodemCustom(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.3g-modem/custom', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.3g-modem/custom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystem3gmodemCustom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.3g-modem/custom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.3g-modem/custom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystem3gmodemCustom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.3g-modem/custom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.autoupdate/push-update
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutoupdatePushUpdate(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.autoupdate/push-update', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.autoupdate/push-update
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutoupdatePushUpdate(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.autoupdate/push-update', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.autoupdate/schedule
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutoupdateSchedule(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.autoupdate/schedule', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.autoupdate/schedule
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutoupdateSchedule(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.autoupdate/schedule', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.autoupdate/tunneling
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutoupdateTunneling(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.autoupdate/tunneling', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.autoupdate/tunneling
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutoupdateTunneling(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.autoupdate/tunneling', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system.dhcp/server/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemDhcpServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.dhcp/server', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system.dhcp/server/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDhcpServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.dhcp/server', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system.dhcp/server/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemDhcpServer(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.dhcp/server', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system.dhcp/server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDhcpServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.dhcp/server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system.dhcp/server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemDhcpServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.dhcp/server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system.dhcp6/server/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemDhcp6Server(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.dhcp6/server', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system.dhcp6/server/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDhcp6Server(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.dhcp6/server', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system.dhcp6/server/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemDhcp6Server(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.dhcp6/server', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system.dhcp6/server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDhcp6Server(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.dhcp6/server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system.dhcp6/server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemDhcp6Server(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.dhcp6/server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.lldp/network-policy/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemLldpNetworkPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.lldp/network-policy', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.lldp/network-policy/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemLldpNetworkPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.lldp/network-policy', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.lldp/network-policy/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemLldpNetworkPolicy(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.lldp/network-policy', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.lldp/network-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemLldpNetworkPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.lldp/network-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.lldp/network-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemLldpNetworkPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.lldp/network-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/admin/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgAdmin(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/admin', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/admin/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/admin', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/admin/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgAdmin(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/admin', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/admin
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgAdmin(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/admin', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/admin
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/admin', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/alertmail/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgAlertmail(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/alertmail', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/alertmail/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgAlertmail(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/alertmail', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/alertmail/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgAlertmail(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/alertmail', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/alertmail
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgAlertmail(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/alertmail', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/alertmail
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgAlertmail(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/alertmail', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/auth/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgAuth(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/auth', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/auth/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgAuth(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/auth', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/auth/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgAuth(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/auth', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/auth
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgAuth(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/auth', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/auth
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgAuth(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/auth', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/fortiguard-wf/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgFortiguardWf(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/fortiguard-wf', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/fortiguard-wf/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgFortiguardWf(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/fortiguard-wf', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/fortiguard-wf/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgFortiguardWf(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/fortiguard-wf', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/fortiguard-wf
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgFortiguardWf(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/fortiguard-wf', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/fortiguard-wf
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgFortiguardWf(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/fortiguard-wf', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/ftp/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgFtp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/ftp', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/ftp/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgFtp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/ftp', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/ftp/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgFtp(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/ftp', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/ftp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgFtp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/ftp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/ftp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgFtp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/ftp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/http/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgHttp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/http', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/http/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgHttp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/http', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/http/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgHttp(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/http', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/http
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgHttp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/http', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/http
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgHttp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/http', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/icap/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgIcap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/icap', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/icap/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgIcap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/icap', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/icap/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgIcap(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/icap', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/icap
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgIcap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/icap', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/icap
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgIcap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/icap', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/mail/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgMail(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/mail', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/mail/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgMail(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/mail', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/mail/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgMail(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/mail', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/mail
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgMail(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/mail', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/mail
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgMail(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/mail', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/nac-quar/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgNacQuar(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/nac-quar', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/nac-quar/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgNacQuar(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/nac-quar', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/nac-quar/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgNacQuar(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/nac-quar', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/nac-quar
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgNacQuar(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/nac-quar', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/nac-quar
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgNacQuar(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/nac-quar', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/spam/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgSpam(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/spam', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/spam/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgSpam(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/spam', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/spam/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgSpam(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/spam', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/spam
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgSpam(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/spam', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/spam
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgSpam(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/spam', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/sslvpn/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgSslvpn(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/sslvpn', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/sslvpn/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgSslvpn(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/sslvpn', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/sslvpn/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgSslvpn(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/sslvpn', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/sslvpn
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgSslvpn(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/sslvpn', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/sslvpn
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgSslvpn(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/sslvpn', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/traffic-quota/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgTrafficQuota(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/traffic-quota', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/traffic-quota/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgTrafficQuota(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/traffic-quota', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/traffic-quota/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgTrafficQuota(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/traffic-quota', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/traffic-quota
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgTrafficQuota(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/traffic-quota', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/traffic-quota
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgTrafficQuota(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/traffic-quota', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/utm/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgUtm(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/utm', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/utm/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgUtm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/utm', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/utm/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgUtm(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/utm', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/utm
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgUtm(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/utm', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/utm
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgUtm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/utm', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/webproxy/{msg-type}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgWebproxy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/webproxy', $msgType, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.replacemsg/webproxy/{msg-type}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $msgType mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgWebproxy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $msgType
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.replacemsg/webproxy', $msgType, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.replacemsg/webproxy/{msg-type}
	 * @param  $msgType mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgWebproxy(string $msgType, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.replacemsg/webproxy', $msgType, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.replacemsg/webproxy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgWebproxy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.replacemsg/webproxy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.replacemsg/webproxy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgWebproxy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.replacemsg/webproxy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.snmp/community/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSnmpCommunity(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.snmp/community', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.snmp/community/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSnmpCommunity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.snmp/community', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.snmp/community/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSnmpCommunity(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.snmp/community', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.snmp/community
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSnmpCommunity(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.snmp/community', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.snmp/community
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSnmpCommunity(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.snmp/community', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.snmp/sysinfo
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSnmpSysinfo(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.snmp/sysinfo', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.snmp/sysinfo
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSnmpSysinfo(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.snmp/sysinfo', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.snmp/user/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSnmpUser(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.snmp/user', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system.snmp/user/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSnmpUser(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system.snmp/user', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system.snmp/user/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSnmpUser(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system.snmp/user', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system.snmp/user
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSnmpUser(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system.snmp/user', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system.snmp/user
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSnmpUser(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system.snmp/user', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/accprofile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAccprofile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/accprofile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/accprofile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAccprofile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/accprofile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/accprofile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAccprofile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/accprofile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/accprofile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAccprofile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/accprofile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/accprofile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAccprofile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/accprofile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/admin/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAdmin(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/admin', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/admin/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/admin', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/admin/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAdmin(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/admin', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/admin
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAdmin(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/admin', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/admin
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/admin', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/alarm
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAlarm(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/alarm', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/alarm
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAlarm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/alarm', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/api-user/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemApiUser(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/api-user', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/api-user/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemApiUser(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/api-user', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/api-user/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemApiUser(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/api-user', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/api-user
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemApiUser(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/api-user', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/api-user
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemApiUser(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/api-user', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/arp-table/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemArpTable(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/arp-table', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/arp-table/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemArpTable(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/arp-table', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/arp-table/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemArpTable(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/arp-table', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/arp-table
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemArpTable(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/arp-table', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/arp-table
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemArpTable(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/arp-table', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/auto-install
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutoInstall(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/auto-install', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/auto-install
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutoInstall(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/auto-install', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/auto-script/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAutoScript(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/auto-script', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/auto-script/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutoScript(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/auto-script', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/auto-script/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAutoScript(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/auto-script', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/auto-script
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutoScript(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/auto-script', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/auto-script
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAutoScript(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/auto-script', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-action/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAutomationAction(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-action', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/automation-action/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutomationAction(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/automation-action', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/automation-action/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAutomationAction(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/automation-action', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-action
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutomationAction(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-action', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/automation-action
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAutomationAction(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/automation-action', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-destination/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAutomationDestination(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-destination', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/automation-destination/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutomationDestination(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/automation-destination', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/automation-destination/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAutomationDestination(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/automation-destination', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-destination
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutomationDestination(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-destination', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/automation-destination
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAutomationDestination(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/automation-destination', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-stitch/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAutomationStitch(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-stitch', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/automation-stitch/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutomationStitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/automation-stitch', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/automation-stitch/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAutomationStitch(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/automation-stitch', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-stitch
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutomationStitch(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-stitch', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/automation-stitch
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAutomationStitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/automation-stitch', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-trigger/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemAutomationTrigger(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-trigger', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/automation-trigger/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemAutomationTrigger(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/automation-trigger', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/automation-trigger/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemAutomationTrigger(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/automation-trigger', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/automation-trigger
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemAutomationTrigger(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/automation-trigger', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/automation-trigger
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemAutomationTrigger(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/automation-trigger', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/central-management
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemCentralManagement(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/central-management', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/central-management
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemCentralManagement(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/central-management', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/cluster-sync/{sync-id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $syncId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemClusterSync(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $syncId
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/cluster-sync', $syncId, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/cluster-sync/{sync-id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $syncId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemClusterSync(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $syncId
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/cluster-sync', $syncId, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/cluster-sync/{sync-id}
	 * @param  $syncId mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemClusterSync(int $syncId, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/cluster-sync', $syncId, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/cluster-sync
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemClusterSync(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/cluster-sync', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/cluster-sync
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemClusterSync(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/cluster-sync', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/console
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemConsole(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/console', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/console
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemConsole(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/console', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /system/csf
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemCsf(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/csf', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /system/csf
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemCsf(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/csf', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/custom-language/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemCustomLanguage(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/custom-language', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/custom-language/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemCustomLanguage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/custom-language', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/custom-language/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemCustomLanguage(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/custom-language', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/custom-language
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemCustomLanguage(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/custom-language', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/custom-language
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemCustomLanguage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/custom-language', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ddns/{ddnsid}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $ddnsid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemDdns(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $ddnsid
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ddns', $ddnsid, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ddns/{ddnsid}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $ddnsid mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDdns(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $ddnsid
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ddns', $ddnsid, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/ddns/{ddnsid}
	 * @param  $ddnsid mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemDdns(int $ddnsid, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ddns', $ddnsid, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ddns
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDdns(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ddns', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/ddns
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemDdns(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ddns', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dedicated-mgmt
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDedicatedMgmt(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dedicated-mgmt', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/dedicated-mgmt
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDedicatedMgmt(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/dedicated-mgmt', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dns
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDns(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dns', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/dns
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDns(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/dns', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dns-database/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemDnsDatabase(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dns-database', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/dns-database/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDnsDatabase(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/dns-database', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/dns-database/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemDnsDatabase(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/dns-database', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dns-database
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDnsDatabase(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dns-database', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/dns-database
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemDnsDatabase(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/dns-database', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dns-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemDnsServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dns-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/dns-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDnsServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/dns-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/dns-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemDnsServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/dns-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dns-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDnsServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dns-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/dns-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemDnsServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/dns-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dscp-based-priority/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemDscpBasedPriority(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dscp-based-priority', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/dscp-based-priority/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemDscpBasedPriority(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/dscp-based-priority', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/dscp-based-priority/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemDscpBasedPriority(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/dscp-based-priority', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/dscp-based-priority
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemDscpBasedPriority(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/dscp-based-priority', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/dscp-based-priority
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemDscpBasedPriority(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/dscp-based-priority', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /system/email-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemEmailServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/email-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /system/email-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemEmailServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/email-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/external-resource/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemExternalResource(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/external-resource', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/external-resource/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemExternalResource(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/external-resource', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/external-resource/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemExternalResource(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/external-resource', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/external-resource
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemExternalResource(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/external-resource', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/external-resource
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemExternalResource(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/external-resource', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/fips-cc
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemFipsCc(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/fips-cc', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/fips-cc
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemFipsCc(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/fips-cc', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/fortiguard
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemFortiguard(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/fortiguard', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/fortiguard
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemFortiguard(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/fortiguard', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/fortimanager
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemFortimanager(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/fortimanager', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/fortimanager
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemFortimanager(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/fortimanager', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /system/fortisandbox
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemFortisandbox(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/fortisandbox', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /system/fortisandbox
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemFortisandbox(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/fortisandbox', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/fsso-polling
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemFssoPolling(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/fsso-polling', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/fsso-polling
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemFssoPolling(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/fsso-polling', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ftm-push
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemFtmPush(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ftm-push', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ftm-push
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemFtmPush(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ftm-push', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/geneve/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemGeneve(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/geneve', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/geneve/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemGeneve(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/geneve', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/geneve/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemGeneve(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/geneve', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/geneve
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemGeneve(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/geneve', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/geneve
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemGeneve(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/geneve', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/geoip-country/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemGeoipCountry(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/geoip-country', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/geoip-country/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemGeoipCountry(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/geoip-country', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/geoip-country/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemGeoipCountry(string $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/geoip-country', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/geoip-country
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemGeoipCountry(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/geoip-country', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/geoip-country
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemGeoipCountry(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/geoip-country', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/geoip-override/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemGeoipOverride(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/geoip-override', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/geoip-override/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemGeoipOverride(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/geoip-override', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/geoip-override/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemGeoipOverride(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/geoip-override', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/geoip-override
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemGeoipOverride(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/geoip-override', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/geoip-override
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemGeoipOverride(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/geoip-override', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/global
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemGlobal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/global', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/global
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemGlobal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/global', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/gre-tunnel/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemGreTunnel(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/gre-tunnel', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/gre-tunnel/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemGreTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/gre-tunnel', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/gre-tunnel/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemGreTunnel(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/gre-tunnel', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/gre-tunnel
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemGreTunnel(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/gre-tunnel', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/gre-tunnel
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemGreTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/gre-tunnel', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ha
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemHa(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ha', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ha
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemHa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ha', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ha-monitor
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemHaMonitor(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ha-monitor', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ha-monitor
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemHaMonitor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ha-monitor', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/interface/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemInterface(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/interface', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/interface/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/interface', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/interface/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemInterface(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/interface', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/interface
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemInterface(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/interface', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/interface
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/interface', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/ipip-tunnel/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemIpipTunnel(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipip-tunnel', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/ipip-tunnel/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIpipTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ipip-tunnel', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/ipip-tunnel/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemIpipTunnel(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ipip-tunnel', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/ipip-tunnel
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIpipTunnel(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipip-tunnel', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/ipip-tunnel
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemIpipTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ipip-tunnel', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ips
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIps(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ips', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ips
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIps(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ips', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ips-urlfilter-dns/{address}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $address mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemIpsUrlfilterDns(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $address
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ips-urlfilter-dns', $address, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ips-urlfilter-dns/{address}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $address mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIpsUrlfilterDns(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $address
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ips-urlfilter-dns', $address, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/ips-urlfilter-dns/{address}
	 * @param  $address mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemIpsUrlfilterDns(string $address, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ips-urlfilter-dns', $address, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ips-urlfilter-dns
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIpsUrlfilterDns(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ips-urlfilter-dns', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/ips-urlfilter-dns
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemIpsUrlfilterDns(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ips-urlfilter-dns', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ips-urlfilter-dns6/{address6}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $address6 mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemIpsUrlfilterDns6(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $address6
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ips-urlfilter-dns6', $address6, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ips-urlfilter-dns6/{address6}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $address6 mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIpsUrlfilterDns6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $address6
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ips-urlfilter-dns6', $address6, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/ips-urlfilter-dns6/{address6}
	 * @param  $address6 mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemIpsUrlfilterDns6(string $address6, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ips-urlfilter-dns6', $address6, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ips-urlfilter-dns6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIpsUrlfilterDns6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ips-urlfilter-dns6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/ips-urlfilter-dns6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemIpsUrlfilterDns6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ips-urlfilter-dns6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/ipsec-aggregate/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemIpsecAggregate(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipsec-aggregate', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/ipsec-aggregate/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIpsecAggregate(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ipsec-aggregate', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/ipsec-aggregate/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemIpsecAggregate(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ipsec-aggregate', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/ipsec-aggregate
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIpsecAggregate(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipsec-aggregate', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/ipsec-aggregate
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemIpsecAggregate(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ipsec-aggregate', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/ipv6-neighbor-cache/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemIpv6NeighborCache(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipv6-neighbor-cache', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/ipv6-neighbor-cache/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIpv6NeighborCache(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ipv6-neighbor-cache', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/ipv6-neighbor-cache/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemIpv6NeighborCache(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ipv6-neighbor-cache', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/ipv6-neighbor-cache
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIpv6NeighborCache(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipv6-neighbor-cache', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/ipv6-neighbor-cache
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemIpv6NeighborCache(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ipv6-neighbor-cache', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ipv6-tunnel/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemIpv6Tunnel(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipv6-tunnel', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ipv6-tunnel/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemIpv6Tunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ipv6-tunnel', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/ipv6-tunnel/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemIpv6Tunnel(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/ipv6-tunnel', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ipv6-tunnel
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemIpv6Tunnel(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ipv6-tunnel', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/ipv6-tunnel
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemIpv6Tunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/ipv6-tunnel', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/link-monitor/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemLinkMonitor(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/link-monitor', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/link-monitor/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemLinkMonitor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/link-monitor', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/link-monitor/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemLinkMonitor(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/link-monitor', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/link-monitor
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemLinkMonitor(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/link-monitor', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/link-monitor
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemLinkMonitor(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/link-monitor', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/lte-modem
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemLteModem(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/lte-modem', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/lte-modem
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemLteModem(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/lte-modem', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/mac-address-table/{mac}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $mac mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemMacAddressTable(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $mac
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/mac-address-table', $mac, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/mac-address-table/{mac}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $mac mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemMacAddressTable(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $mac
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/mac-address-table', $mac, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/mac-address-table/{mac}
	 * @param  $mac mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemMacAddressTable(string $mac, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/mac-address-table', $mac, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/mac-address-table
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemMacAddressTable(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/mac-address-table', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/mac-address-table
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemMacAddressTable(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/mac-address-table', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/mobile-tunnel/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemMobileTunnel(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/mobile-tunnel', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/mobile-tunnel/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemMobileTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/mobile-tunnel', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/mobile-tunnel/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemMobileTunnel(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/mobile-tunnel', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/mobile-tunnel
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemMobileTunnel(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/mobile-tunnel', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/mobile-tunnel
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemMobileTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/mobile-tunnel', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/modem
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemModem(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/modem', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/modem
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemModem(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/modem', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/nat64
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemNat64(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/nat64', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/nat64
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemNat64(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/nat64', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/nd-proxy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemNdProxy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/nd-proxy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/nd-proxy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemNdProxy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/nd-proxy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/netflow
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemNetflow(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/netflow', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/netflow
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemNetflow(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/netflow', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: loggrp
	 * @route  GET /system/network-visibility
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemNetworkVisibility(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/network-visibility', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: loggrp
	 * @route  PUT /system/network-visibility
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemNetworkVisibility(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/network-visibility', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/npu
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemNpu(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/npu', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/npu
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemNpu(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/npu', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ntp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemNtp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ntp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ntp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemNtp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ntp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/object-tagging/{category}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $category mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemObjectTagging(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $category
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/object-tagging', $category, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/object-tagging/{category}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $category mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemObjectTagging(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $category
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/object-tagging', $category, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/object-tagging/{category}
	 * @param  $category mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemObjectTagging(string $category, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/object-tagging', $category, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/object-tagging
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemObjectTagging(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/object-tagging', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/object-tagging
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemObjectTagging(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/object-tagging', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/password-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemPasswordPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/password-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/password-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemPasswordPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/password-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/password-policy-guest-admin
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemPasswordPolicyGuestAdmin(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/password-policy-guest-admin', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/password-policy-guest-admin
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemPasswordPolicyGuestAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/password-policy-guest-admin', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/physical-switch/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemPhysicalSwitch(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/physical-switch', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/physical-switch/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemPhysicalSwitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/physical-switch', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/physical-switch/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemPhysicalSwitch(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/physical-switch', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/physical-switch
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemPhysicalSwitch(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/physical-switch', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/physical-switch
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemPhysicalSwitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/physical-switch', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/pppoe-interface/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemPppoeInterface(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/pppoe-interface', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/pppoe-interface/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemPppoeInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/pppoe-interface', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/pppoe-interface/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemPppoeInterface(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/pppoe-interface', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/pppoe-interface
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemPppoeInterface(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/pppoe-interface', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/pppoe-interface
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemPppoeInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/pppoe-interface', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/probe-response
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemProbeResponse(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/probe-response', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/probe-response
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemProbeResponse(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/probe-response', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/proxy-arp/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemProxyArp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/proxy-arp', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/proxy-arp/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemProxyArp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/proxy-arp', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/proxy-arp/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemProxyArp(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/proxy-arp', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/proxy-arp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemProxyArp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/proxy-arp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/proxy-arp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemProxyArp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/proxy-arp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/ptp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemPtp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/ptp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/ptp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemPtp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/ptp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/replacemsg-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/replacemsg-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/replacemsg-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/replacemsg-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/replacemsg-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/replacemsg-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/replacemsg-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/replacemsg-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/replacemsg-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/replacemsg-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/replacemsg-image/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemReplacemsgImage(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/replacemsg-image', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/replacemsg-image/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemReplacemsgImage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/replacemsg-image', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/replacemsg-image/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemReplacemsgImage(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/replacemsg-image', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/replacemsg-image
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemReplacemsgImage(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/replacemsg-image', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/replacemsg-image
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemReplacemsgImage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/replacemsg-image', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/resource-limits
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemResourceLimits(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/resource-limits', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/resource-limits
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemResourceLimits(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/resource-limits', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/saml
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSaml(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/saml', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/saml
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSaml(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/saml', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sdn-connector/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSdnConnector(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sdn-connector', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/sdn-connector/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSdnConnector(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/sdn-connector', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/sdn-connector/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSdnConnector(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/sdn-connector', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sdn-connector
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSdnConnector(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sdn-connector', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/sdn-connector
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSdnConnector(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/sdn-connector', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/sdwan
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSdwan(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sdwan', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/sdwan
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSdwan(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/sdwan', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/session-helper/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSessionHelper(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/session-helper', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/session-helper/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSessionHelper(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/session-helper', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/session-helper/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSessionHelper(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/session-helper', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/session-helper
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSessionHelper(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/session-helper', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/session-helper
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSessionHelper(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/session-helper', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/session-ttl
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSessionTtl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/session-ttl', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/session-ttl
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSessionTtl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/session-ttl', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sflow
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSflow(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sflow', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/sflow
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSflow(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/sflow', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sit-tunnel/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSitTunnel(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sit-tunnel', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/sit-tunnel/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSitTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/sit-tunnel', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/sit-tunnel/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSitTunnel(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/sit-tunnel', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sit-tunnel
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSitTunnel(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sit-tunnel', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/sit-tunnel
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSitTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/sit-tunnel', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /system/sms-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSmsServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sms-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /system/sms-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSmsServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/sms-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /system/sms-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSmsServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/sms-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /system/sms-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSmsServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sms-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /system/sms-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSmsServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/sms-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/speed-test-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSpeedTestServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/speed-test-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/speed-test-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSpeedTestServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/speed-test-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/speed-test-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSpeedTestServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/speed-test-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/speed-test-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSpeedTestServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/speed-test-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/speed-test-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSpeedTestServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/speed-test-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sso-admin/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSsoAdmin(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sso-admin', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/sso-admin/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSsoAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/sso-admin', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/sso-admin/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSsoAdmin(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/sso-admin', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/sso-admin
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSsoAdmin(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/sso-admin', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/sso-admin
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSsoAdmin(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/sso-admin', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/standalone-cluster
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemStandaloneCluster(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/standalone-cluster', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/standalone-cluster
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemStandaloneCluster(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/standalone-cluster', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/storage/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemStorage(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/storage', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/storage/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemStorage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/storage', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/storage/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemStorage(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/storage', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/storage
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemStorage(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/storage', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/storage
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemStorage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/storage', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/stp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemStp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/stp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/stp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemStp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/stp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/switch-interface/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemSwitchInterface(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/switch-interface', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/switch-interface/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemSwitchInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/switch-interface', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/switch-interface/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemSwitchInterface(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/switch-interface', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/switch-interface
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemSwitchInterface(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/switch-interface', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/switch-interface
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemSwitchInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/switch-interface', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/tos-based-priority/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemTosBasedPriority(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/tos-based-priority', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/tos-based-priority/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemTosBasedPriority(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/tos-based-priority', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/tos-based-priority/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemTosBasedPriority(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/tos-based-priority', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/tos-based-priority
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemTosBasedPriority(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/tos-based-priority', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/tos-based-priority
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemTosBasedPriority(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/tos-based-priority', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVdom(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/vdom/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/vdom/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVdom(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/vdom', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdom(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/vdom
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVdom(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/vdom', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-dns
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomDns(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-dns', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/vdom-dns
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomDns(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-dns', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-exception/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVdomException(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-exception', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/vdom-exception/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomException(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-exception', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/vdom-exception/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVdomException(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/vdom-exception', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-exception
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomException(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-exception', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/vdom-exception
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVdomException(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/vdom-exception', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/vdom-link/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVdomLink(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-link', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/vdom-link/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomLink(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-link', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/vdom-link/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVdomLink(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/vdom-link', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/vdom-link
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomLink(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-link', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/vdom-link
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVdomLink(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/vdom-link', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-netflow
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomNetflow(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-netflow', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/vdom-netflow
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomNetflow(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-netflow', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-property/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVdomProperty(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-property', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/vdom-property/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomProperty(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-property', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/vdom-property/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVdomProperty(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/vdom-property', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-property
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomProperty(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-property', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/vdom-property
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVdomProperty(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/vdom-property', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /system/vdom-radius-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVdomRadiusServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-radius-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /system/vdom-radius-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomRadiusServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-radius-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /system/vdom-radius-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVdomRadiusServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/vdom-radius-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /system/vdom-radius-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomRadiusServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-radius-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /system/vdom-radius-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVdomRadiusServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/vdom-radius-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/vdom-sflow
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVdomSflow(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vdom-sflow', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/vdom-sflow
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVdomSflow(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vdom-sflow', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/virtual-switch/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVirtualSwitch(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/virtual-switch', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: sysgrp
	 * @route  PUT /system/virtual-switch/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVirtualSwitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/virtual-switch', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: sysgrp
	 * @route  DELETE /system/virtual-switch/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVirtualSwitch(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/virtual-switch', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: sysgrp
	 * @route  GET /system/virtual-switch
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVirtualSwitch(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/virtual-switch', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: sysgrp
	 * @route  POST /system/virtual-switch
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVirtualSwitch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/virtual-switch', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/virtual-wire-pair/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVirtualWirePair(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/virtual-wire-pair', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/virtual-wire-pair/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVirtualWirePair(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/virtual-wire-pair', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/virtual-wire-pair/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVirtualWirePair(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/virtual-wire-pair', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/virtual-wire-pair
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVirtualWirePair(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/virtual-wire-pair', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/virtual-wire-pair
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVirtualWirePair(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/virtual-wire-pair', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/vne-tunnel
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVneTunnel(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vne-tunnel', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/vne-tunnel
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVneTunnel(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vne-tunnel', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/vxlan/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemVxlan(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vxlan', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/vxlan/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemVxlan(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/vxlan', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/vxlan/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemVxlan(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/vxlan', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/vxlan
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemVxlan(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/vxlan', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/vxlan
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemVxlan(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/vxlan', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /system/wccp/{service-id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $serviceId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemWccp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $serviceId
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/wccp', $serviceId, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: secfabgrp
	 * @route  PUT /system/wccp/{service-id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $serviceId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemWccp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $serviceId
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/wccp', $serviceId, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: secfabgrp
	 * @route  DELETE /system/wccp/{service-id}
	 * @param  $serviceId mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemWccp(string $serviceId, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/wccp', $serviceId, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: secfabgrp
	 * @route  GET /system/wccp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemWccp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/wccp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: secfabgrp
	 * @route  POST /system/wccp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemWccp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/wccp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/zone/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getSystemZone(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/zone', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /system/zone/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateSystemZone(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/system/zone', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /system/zone/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteSystemZone(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/system/zone', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /system/zone
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllSystemZone(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/system/zone', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /system/zone
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addSystemZone(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/system/zone', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/adgrp/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserAdgrp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/adgrp', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/adgrp/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserAdgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/adgrp', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/adgrp/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserAdgrp(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/adgrp', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/adgrp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserAdgrp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/adgrp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/adgrp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserAdgrp(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/adgrp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/domain-controller/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserDomainController(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/domain-controller', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/domain-controller/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserDomainController(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/domain-controller', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/domain-controller/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserDomainController(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/domain-controller', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/domain-controller
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserDomainController(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/domain-controller', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/domain-controller
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserDomainController(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/domain-controller', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/exchange/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserExchange(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/exchange', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/exchange/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserExchange(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/exchange', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/exchange/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserExchange(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/exchange', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/exchange
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserExchange(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/exchange', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/exchange
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserExchange(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/exchange', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/fortitoken/{serial-number}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $serialNumber mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserFortitoken(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $serialNumber
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/fortitoken', $serialNumber, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/fortitoken/{serial-number}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $serialNumber mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserFortitoken(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $serialNumber
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/fortitoken', $serialNumber, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/fortitoken/{serial-number}
	 * @param  $serialNumber mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserFortitoken(string $serialNumber, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/fortitoken', $serialNumber, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/fortitoken
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserFortitoken(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/fortitoken', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/fortitoken
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserFortitoken(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/fortitoken', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/fsso/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserFsso(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/fsso', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/fsso/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserFsso(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/fsso', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/fsso/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserFsso(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/fsso', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/fsso
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserFsso(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/fsso', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/fsso
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserFsso(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/fsso', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/fsso-polling/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserFssoPolling(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/fsso-polling', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/fsso-polling/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserFssoPolling(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/fsso-polling', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/fsso-polling/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserFssoPolling(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/fsso-polling', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/fsso-polling
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserFssoPolling(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/fsso-polling', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/fsso-polling
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserFssoPolling(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/fsso-polling', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserGroup(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/krb-keytab/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserKrbKeytab(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/krb-keytab', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/krb-keytab/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserKrbKeytab(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/krb-keytab', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/krb-keytab/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserKrbKeytab(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/krb-keytab', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/krb-keytab
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserKrbKeytab(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/krb-keytab', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/krb-keytab
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserKrbKeytab(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/krb-keytab', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/ldap/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserLdap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/ldap', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/ldap/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserLdap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/ldap', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/ldap/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserLdap(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/ldap', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/ldap
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserLdap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/ldap', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/ldap
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserLdap(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/ldap', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/local/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserLocal(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/local', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/local/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserLocal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/local', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/local/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserLocal(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/local', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/local
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserLocal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/local', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/local
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserLocal(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/local', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /user/nac-policy/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserNacPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/nac-policy', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /user/nac-policy/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserNacPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/nac-policy', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /user/nac-policy/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserNacPolicy(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/nac-policy', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /user/nac-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserNacPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/nac-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /user/nac-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserNacPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/nac-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/password-policy/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserPasswordPolicy(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/password-policy', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/password-policy/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserPasswordPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/password-policy', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/password-policy/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserPasswordPolicy(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/password-policy', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/password-policy
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserPasswordPolicy(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/password-policy', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/password-policy
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserPasswordPolicy(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/password-policy', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/peer/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserPeer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/peer', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/peer/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserPeer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/peer', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/peer/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserPeer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/peer', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/peer
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserPeer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/peer', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/peer
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserPeer(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/peer', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/peergrp/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserPeergrp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/peergrp', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/peergrp/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserPeergrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/peergrp', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/peergrp/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserPeergrp(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/peergrp', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/peergrp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserPeergrp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/peergrp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/peergrp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserPeergrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/peergrp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/pop3/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserPop3(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/pop3', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/pop3/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserPop3(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/pop3', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/pop3/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserPop3(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/pop3', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/pop3
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserPop3(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/pop3', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/pop3
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserPop3(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/pop3', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /user/quarantine
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserQuarantine(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/quarantine', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /user/quarantine
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserQuarantine(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/quarantine', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/radius/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserRadius(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/radius', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/radius/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserRadius(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/radius', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/radius/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserRadius(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/radius', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/radius
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserRadius(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/radius', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/radius
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserRadius(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/radius', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/saml/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserSaml(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/saml', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/saml/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserSaml(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/saml', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/saml/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserSaml(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/saml', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/saml
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserSaml(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/saml', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/saml
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserSaml(stdClass $body, array $vdom = null, string $action = null, string $nkey = null) : stdClass
	{
		return $this->curlRequest('POST', '/Configuration/user/saml', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/security-exempt-list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserSecurityExemptList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/security-exempt-list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/security-exempt-list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserSecurityExemptList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/security-exempt-list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/security-exempt-list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserSecurityExemptList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/security-exempt-list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/security-exempt-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserSecurityExemptList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/security-exempt-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/security-exempt-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserSecurityExemptList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/security-exempt-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/tacacs+/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getUserTacacs(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/tacacs+', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: authgrp
	 * @route  PUT /user/tacacs+/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateUserTacacs(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/user/tacacs+', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: authgrp
	 * @route  DELETE /user/tacacs+/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteUserTacacs(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/user/tacacs+', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: authgrp
	 * @route  GET /user/tacacs+
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllUserTacacs(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/user/tacacs+', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: authgrp
	 * @route  POST /user/tacacs+
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addUserTacacs(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/user/tacacs+', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /voip/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVoipProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/voip/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /voip/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVoipProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/voip/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /voip/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVoipProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/voip/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /voip/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVoipProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/voip/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /voip/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVoipProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/voip/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/ca/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnCertificateCa(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/ca', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.certificate/ca/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnCertificateCa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.certificate/ca', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.certificate/ca/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnCertificateCa(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.certificate/ca', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/ca
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnCertificateCa(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/ca', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.certificate/ca
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnCertificateCa(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.certificate/ca', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/crl/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnCertificateCrl(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/crl', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.certificate/crl/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnCertificateCrl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.certificate/crl', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.certificate/crl/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnCertificateCrl(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.certificate/crl', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/crl
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnCertificateCrl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/crl', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.certificate/crl
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnCertificateCrl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.certificate/crl', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/local/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnCertificateLocal(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/local', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.certificate/local/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnCertificateLocal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.certificate/local', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.certificate/local/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnCertificateLocal(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.certificate/local', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/local
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnCertificateLocal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/local', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.certificate/local
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnCertificateLocal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.certificate/local', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/ocsp-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnCertificateOcspServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/ocsp-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.certificate/ocsp-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnCertificateOcspServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.certificate/ocsp-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.certificate/ocsp-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnCertificateOcspServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.certificate/ocsp-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/ocsp-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnCertificateOcspServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/ocsp-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.certificate/ocsp-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnCertificateOcspServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.certificate/ocsp-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/remote/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnCertificateRemote(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/remote', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.certificate/remote/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnCertificateRemote(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.certificate/remote', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.certificate/remote/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnCertificateRemote(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.certificate/remote', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/remote
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnCertificateRemote(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/remote', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.certificate/remote
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnCertificateRemote(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.certificate/remote', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.certificate/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnCertificateSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.certificate/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.certificate/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnCertificateSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.certificate/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/concentrator/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecConcentrator(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/concentrator', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/concentrator/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecConcentrator(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/concentrator', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/concentrator/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecConcentrator(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/concentrator', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/concentrator
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecConcentrator(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/concentrator', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/concentrator
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecConcentrator(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/concentrator', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/forticlient/{realm}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $realm mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecForticlient(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $realm
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/forticlient', $realm, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/forticlient/{realm}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $realm mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecForticlient(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $realm
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/forticlient', $realm, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/forticlient/{realm}
	 * @param  $realm mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecForticlient(string $realm, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/forticlient', $realm, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/forticlient
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecForticlient(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/forticlient', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/forticlient
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecForticlient(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/forticlient', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/manualkey/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecManualkey(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/manualkey', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/manualkey/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecManualkey(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/manualkey', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/manualkey/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecManualkey(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/manualkey', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/manualkey
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecManualkey(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/manualkey', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/manualkey
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecManualkey(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/manualkey', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/manualkey-interface/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecManualkeyInterface(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/manualkey-interface', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/manualkey-interface/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecManualkeyInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/manualkey-interface', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/manualkey-interface/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecManualkeyInterface(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/manualkey-interface', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/manualkey-interface
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecManualkeyInterface(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/manualkey-interface', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/manualkey-interface
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecManualkeyInterface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/manualkey-interface', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase1/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecPhase1(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase1', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/phase1/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecPhase1(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/phase1', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/phase1/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecPhase1(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/phase1', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase1
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecPhase1(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase1', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/phase1
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecPhase1(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/phase1', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase1-interface/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecPhase1Interface(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase1-interface', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/phase1-interface/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecPhase1Interface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/phase1-interface', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/phase1-interface/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecPhase1Interface(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/phase1-interface', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase1-interface
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecPhase1Interface(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase1-interface', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/phase1-interface
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecPhase1Interface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/phase1-interface', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase2/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecPhase2(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase2', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/phase2/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecPhase2(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/phase2', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/phase2/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecPhase2(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/phase2', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase2
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecPhase2(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase2', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/phase2
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecPhase2(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/phase2', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase2-interface/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnIpsecPhase2Interface(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase2-interface', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ipsec/phase2-interface/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnIpsecPhase2Interface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ipsec/phase2-interface', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ipsec/phase2-interface/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnIpsecPhase2Interface(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ipsec/phase2-interface', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ipsec/phase2-interface
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnIpsecPhase2Interface(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ipsec/phase2-interface', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ipsec/phase2-interface
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnIpsecPhase2Interface(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ipsec/phase2-interface', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/host-check-software/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnSslWebHostCheckSoftware(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/host-check-software', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ssl.web/host-check-software/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnSslWebHostCheckSoftware(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ssl.web/host-check-software', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ssl.web/host-check-software/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnSslWebHostCheckSoftware(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ssl.web/host-check-software', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/host-check-software
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnSslWebHostCheckSoftware(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/host-check-software', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ssl.web/host-check-software
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnSslWebHostCheckSoftware(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ssl.web/host-check-software', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/portal/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnSslWebPortal(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/portal', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ssl.web/portal/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnSslWebPortal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ssl.web/portal', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ssl.web/portal/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnSslWebPortal(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ssl.web/portal', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/portal
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnSslWebPortal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/portal', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ssl.web/portal
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnSslWebPortal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ssl.web/portal', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/realm/{url-path}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $urlPath mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnSslWebRealm(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $urlPath
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/realm', $urlPath, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ssl.web/realm/{url-path}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $urlPath mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnSslWebRealm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $urlPath
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ssl.web/realm', $urlPath, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ssl.web/realm/{url-path}
	 * @param  $urlPath mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnSslWebRealm(string $urlPath, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ssl.web/realm', $urlPath, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/realm
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnSslWebRealm(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/realm', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ssl.web/realm
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnSslWebRealm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ssl.web/realm', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/user-bookmark/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnSslWebUserBookmark(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/user-bookmark', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ssl.web/user-bookmark/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnSslWebUserBookmark(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ssl.web/user-bookmark', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ssl.web/user-bookmark/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnSslWebUserBookmark(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ssl.web/user-bookmark', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/user-bookmark
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnSslWebUserBookmark(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/user-bookmark', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ssl.web/user-bookmark
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnSslWebUserBookmark(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ssl.web/user-bookmark', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/user-group-bookmark/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getVpnSslWebUserGroupBookmark(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/user-group-bookmark', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ssl.web/user-group-bookmark/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnSslWebUserGroupBookmark(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ssl.web/user-group-bookmark', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: vpngrp
	 * @route  DELETE /vpn.ssl.web/user-group-bookmark/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteVpnSslWebUserGroupBookmark(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/vpn.ssl.web/user-group-bookmark', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl.web/user-group-bookmark
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnSslWebUserGroupBookmark(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl.web/user-group-bookmark', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: vpngrp
	 * @route  POST /vpn.ssl.web/user-group-bookmark
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addVpnSslWebUserGroupBookmark(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/vpn.ssl.web/user-group-bookmark', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn.ssl/settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnSslSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn.ssl/settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn.ssl/settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnSslSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn.ssl/settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn/l2tp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnL2tp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn/l2tp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn/l2tp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnL2tp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn/l2tp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn/ocvpn
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnOcvpn(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn/ocvpn', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn/ocvpn
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnOcvpn(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn/ocvpn', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: vpngrp
	 * @route  GET /vpn/pptp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllVpnPptp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/vpn/pptp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: vpngrp
	 * @route  PUT /vpn/pptp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateVpnPptp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/vpn/pptp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /waf/main-class/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWafMainClass(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/waf/main-class', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /waf/main-class/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWafMainClass(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/waf/main-class', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /waf/main-class/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWafMainClass(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/waf/main-class', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /waf/main-class
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWafMainClass(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/waf/main-class', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /waf/main-class
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWafMainClass(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/waf/main-class', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /waf/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWafProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/waf/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /waf/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWafProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/waf/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /waf/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWafProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/waf/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /waf/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWafProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/waf/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /waf/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWafProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/waf/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /waf/signature/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWafSignature(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/waf/signature', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /waf/signature/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWafSignature(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/waf/signature', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /waf/signature/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWafSignature(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/waf/signature', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /waf/signature
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWafSignature(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/waf/signature', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /waf/signature
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWafSignature(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/waf/signature', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/auth-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWanoptAuthGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/auth-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/auth-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptAuthGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/auth-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  DELETE /wanopt/auth-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWanoptAuthGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wanopt/auth-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/auth-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptAuthGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/auth-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wanoptgrp
	 * @route  POST /wanopt/auth-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWanoptAuthGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wanopt/auth-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/cache-service
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptCacheService(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/cache-service', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/cache-service
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptCacheService(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/cache-service', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/content-delivery-network-rule/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWanoptContentDeliveryNetworkRule(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/content-delivery-network-rule', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/content-delivery-network-rule/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptContentDeliveryNetworkRule(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/content-delivery-network-rule', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  DELETE /wanopt/content-delivery-network-rule/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWanoptContentDeliveryNetworkRule(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wanopt/content-delivery-network-rule', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/content-delivery-network-rule
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptContentDeliveryNetworkRule(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/content-delivery-network-rule', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wanoptgrp
	 * @route  POST /wanopt/content-delivery-network-rule
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWanoptContentDeliveryNetworkRule(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wanopt/content-delivery-network-rule', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/peer/{peer-host-id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $peerHostId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWanoptPeer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $peerHostId
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/peer', $peerHostId, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/peer/{peer-host-id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $peerHostId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptPeer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $peerHostId
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/peer', $peerHostId, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  DELETE /wanopt/peer/{peer-host-id}
	 * @param  $peerHostId mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWanoptPeer(string $peerHostId, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wanopt/peer', $peerHostId, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/peer
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptPeer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/peer', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wanoptgrp
	 * @route  POST /wanopt/peer
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWanoptPeer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wanopt/peer', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWanoptProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  DELETE /wanopt/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWanoptProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wanopt/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wanoptgrp
	 * @route  POST /wanopt/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWanoptProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wanopt/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/remote-storage
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptRemoteStorage(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/remote-storage', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/remote-storage
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptRemoteStorage(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/remote-storage', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/settings
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptSettings(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/settings', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/settings
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptSettings(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/settings', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wanoptgrp
	 * @route  GET /wanopt/webcache
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWanoptWebcache(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wanopt/webcache', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wanoptgrp
	 * @route  PUT /wanopt/webcache
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWanoptWebcache(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wanopt/webcache', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/debug-url/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebProxyDebugUrl(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/debug-url', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/debug-url/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyDebugUrl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/debug-url', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /web-proxy/debug-url/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebProxyDebugUrl(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/web-proxy/debug-url', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/debug-url
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyDebugUrl(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/debug-url', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /web-proxy/debug-url
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebProxyDebugUrl(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/web-proxy/debug-url', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/explicit
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyExplicit(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/explicit', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/explicit
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyExplicit(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/explicit', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/forward-server/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebProxyForwardServer(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/forward-server', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/forward-server/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyForwardServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/forward-server', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /web-proxy/forward-server/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebProxyForwardServer(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/web-proxy/forward-server', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/forward-server
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyForwardServer(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/forward-server', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /web-proxy/forward-server
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebProxyForwardServer(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/web-proxy/forward-server', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/forward-server-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebProxyForwardServerGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/forward-server-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/forward-server-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyForwardServerGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/forward-server-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /web-proxy/forward-server-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebProxyForwardServerGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/web-proxy/forward-server-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/forward-server-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyForwardServerGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/forward-server-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /web-proxy/forward-server-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebProxyForwardServerGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/web-proxy/forward-server-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/global
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyGlobal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/global', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/global
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyGlobal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/global', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebProxyProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /web-proxy/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebProxyProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/web-proxy/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /web-proxy/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebProxyProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/web-proxy/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/url-match/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebProxyUrlMatch(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/url-match', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/url-match/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyUrlMatch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/url-match', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /web-proxy/url-match/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebProxyUrlMatch(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/web-proxy/url-match', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/url-match
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyUrlMatch(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/url-match', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /web-proxy/url-match
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebProxyUrlMatch(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/web-proxy/url-match', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/wisp/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebProxyWisp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/wisp', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: netgrp
	 * @route  PUT /web-proxy/wisp/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebProxyWisp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/web-proxy/wisp', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: netgrp
	 * @route  DELETE /web-proxy/wisp/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebProxyWisp(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/web-proxy/wisp', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: netgrp
	 * @route  GET /web-proxy/wisp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebProxyWisp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/web-proxy/wisp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: netgrp
	 * @route  POST /web-proxy/wisp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebProxyWisp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/web-proxy/wisp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/content/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterContent(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/content', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/content/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterContent(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/content', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/content/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterContent(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/content', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/content
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterContent(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/content', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/content
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterContent(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/content', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/content-header/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterContentHeader(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/content-header', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/content-header/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterContentHeader(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/content-header', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/content-header/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterContentHeader(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/content-header', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/content-header
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterContentHeader(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/content-header', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/content-header
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterContentHeader(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/content-header', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/fortiguard
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterFortiguard(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/fortiguard', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/fortiguard
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterFortiguard(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/fortiguard', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ftgd-local-cat/{desc}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $desc mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterFtgdLocalCat(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $desc
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ftgd-local-cat', $desc, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/ftgd-local-cat/{desc}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $desc mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterFtgdLocalCat(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $desc
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/ftgd-local-cat', $desc, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/ftgd-local-cat/{desc}
	 * @param  $desc mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterFtgdLocalCat(string $desc, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/ftgd-local-cat', $desc, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ftgd-local-cat
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterFtgdLocalCat(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ftgd-local-cat', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/ftgd-local-cat
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterFtgdLocalCat(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/ftgd-local-cat', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ftgd-local-rating/{url}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $url mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterFtgdLocalRating(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $url
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ftgd-local-rating', $url, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/ftgd-local-rating/{url}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $url mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterFtgdLocalRating(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $url
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/ftgd-local-rating', $url, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/ftgd-local-rating/{url}
	 * @param  $url mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterFtgdLocalRating(string $url, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/ftgd-local-rating', $url, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ftgd-local-rating
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterFtgdLocalRating(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ftgd-local-rating', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/ftgd-local-rating
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterFtgdLocalRating(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/ftgd-local-rating', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ips-urlfilter-cache-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterIpsUrlfilterCacheSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ips-urlfilter-cache-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/ips-urlfilter-cache-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterIpsUrlfilterCacheSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/ips-urlfilter-cache-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ips-urlfilter-setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterIpsUrlfilterSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ips-urlfilter-setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/ips-urlfilter-setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterIpsUrlfilterSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/ips-urlfilter-setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/ips-urlfilter-setting6
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterIpsUrlfilterSetting6(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/ips-urlfilter-setting6', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/ips-urlfilter-setting6
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterIpsUrlfilterSetting6(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/ips-urlfilter-setting6', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/override/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterOverride(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/override', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/override/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterOverride(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/override', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/override/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterOverride(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/override', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/override
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterOverride(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/override', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/override
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterOverride(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/override', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/search-engine/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterSearchEngine(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/search-engine', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/search-engine/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterSearchEngine(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/search-engine', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/search-engine/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterSearchEngine(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/search-engine', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/search-engine
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterSearchEngine(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/search-engine', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/search-engine
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterSearchEngine(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/search-engine', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/urlfilter/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWebfilterUrlfilter(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/urlfilter', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: utmgrp
	 * @route  PUT /webfilter/urlfilter/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWebfilterUrlfilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/webfilter/urlfilter', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: utmgrp
	 * @route  DELETE /webfilter/urlfilter/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWebfilterUrlfilter(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/webfilter/urlfilter', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: utmgrp
	 * @route  GET /webfilter/urlfilter
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWebfilterUrlfilter(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/webfilter/urlfilter', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: utmgrp
	 * @route  POST /webfilter/urlfilter
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWebfilterUrlfilter(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/webfilter/urlfilter', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-3gpp-cellular/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20Anqp3gppCellular(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-3gpp-cellular', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/anqp-3gpp-cellular/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20Anqp3gppCellular(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/anqp-3gpp-cellular', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/anqp-3gpp-cellular/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20Anqp3gppCellular(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/anqp-3gpp-cellular', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-3gpp-cellular
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20Anqp3gppCellular(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-3gpp-cellular', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/anqp-3gpp-cellular
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20Anqp3gppCellular(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/anqp-3gpp-cellular', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-ip-address-type/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20AnqpIpAddressType(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-ip-address-type', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/anqp-ip-address-type/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20AnqpIpAddressType(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/anqp-ip-address-type', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/anqp-ip-address-type/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20AnqpIpAddressType(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/anqp-ip-address-type', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-ip-address-type
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20AnqpIpAddressType(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-ip-address-type', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/anqp-ip-address-type
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20AnqpIpAddressType(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/anqp-ip-address-type', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-nai-realm/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20AnqpNaiRealm(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-nai-realm', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/anqp-nai-realm/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20AnqpNaiRealm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/anqp-nai-realm', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/anqp-nai-realm/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20AnqpNaiRealm(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/anqp-nai-realm', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-nai-realm
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20AnqpNaiRealm(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-nai-realm', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/anqp-nai-realm
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20AnqpNaiRealm(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/anqp-nai-realm', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-network-auth-type/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20AnqpNetworkAuthType(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-network-auth-type', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/anqp-network-auth-type/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20AnqpNetworkAuthType(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/anqp-network-auth-type', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/anqp-network-auth-type/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20AnqpNetworkAuthType(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/anqp-network-auth-type', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-network-auth-type
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20AnqpNetworkAuthType(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-network-auth-type', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/anqp-network-auth-type
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20AnqpNetworkAuthType(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/anqp-network-auth-type', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-roaming-consortium/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20AnqpRoamingConsortium(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-roaming-consortium', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/anqp-roaming-consortium/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20AnqpRoamingConsortium(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/anqp-roaming-consortium', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/anqp-roaming-consortium/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20AnqpRoamingConsortium(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/anqp-roaming-consortium', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-roaming-consortium
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20AnqpRoamingConsortium(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-roaming-consortium', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/anqp-roaming-consortium
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20AnqpRoamingConsortium(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/anqp-roaming-consortium', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-venue-name/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20AnqpVenueName(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-venue-name', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/anqp-venue-name/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20AnqpVenueName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/anqp-venue-name', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/anqp-venue-name/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20AnqpVenueName(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/anqp-venue-name', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/anqp-venue-name
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20AnqpVenueName(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/anqp-venue-name', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/anqp-venue-name
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20AnqpVenueName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/anqp-venue-name', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-conn-capability/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20H2qpConnCapability(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-conn-capability', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/h2qp-conn-capability/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20H2qpConnCapability(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/h2qp-conn-capability', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/h2qp-conn-capability/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20H2qpConnCapability(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/h2qp-conn-capability', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-conn-capability
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20H2qpConnCapability(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-conn-capability', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/h2qp-conn-capability
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20H2qpConnCapability(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/h2qp-conn-capability', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-operator-name/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20H2qpOperatorName(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-operator-name', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/h2qp-operator-name/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20H2qpOperatorName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/h2qp-operator-name', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/h2qp-operator-name/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20H2qpOperatorName(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/h2qp-operator-name', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-operator-name
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20H2qpOperatorName(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-operator-name', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/h2qp-operator-name
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20H2qpOperatorName(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/h2qp-operator-name', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-osu-provider/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20H2qpOsuProvider(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-osu-provider', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/h2qp-osu-provider/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20H2qpOsuProvider(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/h2qp-osu-provider', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/h2qp-osu-provider/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20H2qpOsuProvider(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/h2qp-osu-provider', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-osu-provider
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20H2qpOsuProvider(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-osu-provider', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/h2qp-osu-provider
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20H2qpOsuProvider(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/h2qp-osu-provider', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-wan-metric/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20H2qpWanMetric(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-wan-metric', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/h2qp-wan-metric/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20H2qpWanMetric(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/h2qp-wan-metric', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/h2qp-wan-metric/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20H2qpWanMetric(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/h2qp-wan-metric', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/h2qp-wan-metric
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20H2qpWanMetric(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/h2qp-wan-metric', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/h2qp-wan-metric
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20H2qpWanMetric(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/h2qp-wan-metric', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/hs-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20HsProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/hs-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/hs-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20HsProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/hs-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/hs-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20HsProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/hs-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/hs-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20HsProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/hs-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/hs-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20HsProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/hs-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/icon/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20Icon(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/icon', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/icon/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20Icon(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/icon', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/icon/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20Icon(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/icon', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/icon
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20Icon(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/icon', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/icon
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20Icon(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/icon', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/qos-map/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelesscontrollerHotspot20QosMap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/qos-map', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller.hotspot20/qos-map/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelesscontrollerHotspot20QosMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller.hotspot20/qos-map', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller.hotspot20/qos-map/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelesscontrollerHotspot20QosMap(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller.hotspot20/qos-map', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller.hotspot20/qos-map
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelesscontrollerHotspot20QosMap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller.hotspot20/qos-map', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller.hotspot20/qos-map
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelesscontrollerHotspot20QosMap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller.hotspot20/qos-map', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/access-control-list/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerAccessControlList(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/access-control-list', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/access-control-list/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerAccessControlList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/access-control-list', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/access-control-list/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerAccessControlList(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/access-control-list', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/access-control-list
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerAccessControlList(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/access-control-list', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/access-control-list
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerAccessControlList(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/access-control-list', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/address/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerAddress(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/address', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/address/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/address', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/address/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerAddress(string $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/address', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/address
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerAddress(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/address', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/address
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerAddress(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/address', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/addrgrp/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerAddrgrp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/addrgrp', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/addrgrp/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerAddrgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/addrgrp', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/addrgrp/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerAddrgrp(string $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/addrgrp', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/addrgrp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerAddrgrp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/addrgrp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/addrgrp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerAddrgrp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/addrgrp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/ap-status/{id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerApStatus(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		int $id
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/ap-status', $id, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/ap-status/{id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $id mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerApStatus(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		int $id
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/ap-status', $id, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/ap-status/{id}
	 * @param  $id mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerApStatus(int $id, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/ap-status', $id, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/ap-status
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerApStatus(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/ap-status', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/ap-status
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerApStatus(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/ap-status', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/apcfg-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerApcfgProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/apcfg-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/apcfg-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerApcfgProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/apcfg-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/apcfg-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerApcfgProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/apcfg-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/apcfg-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerApcfgProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/apcfg-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/apcfg-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerApcfgProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/apcfg-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/arrp-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerArrpProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/arrp-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/arrp-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerArrpProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/arrp-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/arrp-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerArrpProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/arrp-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/arrp-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerArrpProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/arrp-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/arrp-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerArrpProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/arrp-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/ble-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerBleProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/ble-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/ble-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerBleProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/ble-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/ble-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerBleProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/ble-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/ble-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerBleProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/ble-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/ble-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerBleProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/ble-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/bonjour-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerBonjourProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/bonjour-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/bonjour-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerBonjourProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/bonjour-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/bonjour-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerBonjourProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/bonjour-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/bonjour-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerBonjourProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/bonjour-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/bonjour-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerBonjourProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/bonjour-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/global
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerGlobal(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/global', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/global
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerGlobal(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/global', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/inter-controller
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerInterController(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/inter-controller', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/inter-controller
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerInterController(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/inter-controller', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/log
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerLog(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/log', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/log
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerLog(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/log', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/mpsk-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerMpskProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/mpsk-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/mpsk-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerMpskProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/mpsk-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/mpsk-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerMpskProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/mpsk-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/mpsk-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerMpskProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/mpsk-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/mpsk-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerMpskProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/mpsk-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/qos-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerQosProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/qos-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/qos-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerQosProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/qos-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/qos-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerQosProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/qos-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/qos-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerQosProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/qos-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/qos-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerQosProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/qos-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/region/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerRegion(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/region', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/region/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerRegion(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/region', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/region/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerRegion(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/region', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/region
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerRegion(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/region', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/region
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerRegion(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/region', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/setting
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerSetting(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/setting', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/setting
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerSetting(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/setting', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/snmp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerSnmp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/snmp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/snmp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerSnmp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/snmp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/timers
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerTimers(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/timers', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/timers
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerTimers(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/timers', NULL, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/utm-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerUtmProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/utm-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/utm-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerUtmProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/utm-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/utm-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerUtmProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/utm-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/utm-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerUtmProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/utm-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/utm-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerUtmProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/utm-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/vap/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerVap(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/vap', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/vap/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerVap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/vap', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/vap/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerVap(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/vap', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/vap
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerVap(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/vap', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/vap
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerVap(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/vap', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/vap-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerVapGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/vap-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/vap-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerVapGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/vap-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/vap-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerVapGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/vap-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/vap-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerVapGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/vap-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/vap-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerVapGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/vap-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wag-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerWagProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wag-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/wag-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerWagProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/wag-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/wag-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerWagProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/wag-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wag-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerWagProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wag-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/wag-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerWagProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/wag-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wids-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerWidsProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wids-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/wids-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerWidsProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/wids-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/wids-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerWidsProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/wids-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wids-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerWidsProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wids-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/wids-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerWidsProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/wids-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wtp/{wtp-id}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $wtpId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerWtp(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $wtpId
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wtp', $wtpId, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/wtp/{wtp-id}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $wtpId mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerWtp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $wtpId
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/wtp', $wtpId, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/wtp/{wtp-id}
	 * @param  $wtpId mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerWtp(string $wtpId, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/wtp', $wtpId, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wtp
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerWtp(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wtp', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/wtp
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerWtp(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/wtp', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wtp-group/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerWtpGroup(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wtp-group', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/wtp-group/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerWtpGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/wtp-group', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/wtp-group/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerWtpGroup(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/wtp-group', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wtp-group
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerWtpGroup(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wtp-group', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/wtp-group
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerWtpGroup(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/wtp-group', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}


	/**
	 * Select a specific entry from a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wtp-profile/{name}
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $action default: Return the CLI default values for this object type.
	 * schema: Return the CLI schema for this object type.
	 * revision: Return the CMDB revision for this object type.
	 * transaction-list: List all configuration transaction(s).
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getWirelessControllerWtpProfile(
		bool $datasource = null,
		bool $with_meta = null,
		bool $skip = null,
		array $format = null,
		string $action = null,
		array $vdom = null,
		string $name
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wtp-profile', $name, ['datasource'=>$datasource, 'with_meta'=>$with_meta, 'skip'=>$skip, 'format'=>$format, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Update this specific resource.
	 *  Access Group: wifi
	 * @route  PUT /wireless-controller/wtp-profile/{name}
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _move_: Move this specific resource.
	 * When *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $before If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.
	 * For example, to move `object 1` to before `object 2`, use:
	 * __action=move&before=2__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $after If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.
	 * For example, to move `object 1` to after `object 3`, use:
	 * __action=move&after=3__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.
	 *
	 * @param  $name mkey
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function updateWirelessControllerWtpProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $before = null,
		string $after = null,
		string $name
	) : stdClass {
		return $this->curlRequest('PUT', '/Configuration/wireless-controller/wtp-profile', $name, ['vdom'=>$vdom, 'action'=>$action, 'before'=>$before, 'after'=>$after], $body);
	}


	/**
	 * Delete this specific resource.
	 *  Access Group: wifi
	 * @route  DELETE /wireless-controller/wtp-profile/{name}
	 * @param  $name mkey
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function deleteWirelessControllerWtpProfile(string $name, array $vdom = null) : stdClass
	{
		return $this->curlRequest('DELETE', '/Configuration/wireless-controller/wtp-profile', $name, ['vdom'=>$vdom], NULL);
	}


	/**
	 * Select all entries in a CLI table.
	 *  Access Group: wifi
	 * @route  GET /wireless-controller/wtp-profile
	 * @param  $datasource Enable to include datasource information for each linked object.
	 * @param  $start Starting entry index.
	 * @param  $count Maximum number of entries to return.
	 * @param  $with_meta Enable to include meta information about each object (type id, references, etc).
	 * @param  $with_contents_hash Enable to include a checksum of each object's contents.
	 * @param  $skip Enable to call CLI skip operator to hide skipped properties.
	 * @param  $format List of property names to include in results, separated by | (i.e. policyid|srcintf).
	 * @param  $filter Filtering multiple key/value pairs
	 * Operator     |   Description
	 * ==     |   Case insensitive match with pattern.
	 * !=     |    Does not match with pattern (case insensitive).
	 * =@     |    Pattern found in object value (case insensitive).
	 * !@     |    ﻿Pattern not﻿ found in object value (case insensitive).
	 * <=     |    Value must be less than or equal to ﻿pattern﻿.
	 * <     |    Value must be less than pattern﻿.
	 * .>=    |    Value must be greater than or equal to ﻿pattern﻿.
	 * .>     |    Value must be greater than ﻿pattern﻿.
	 * Logical OR    |    Separate filters using commas ','
	 * Logical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.
	 * Combining AND and OR    |    You can combine AND and OR filters together to create more complex filters.
	 *
	 * @param  $key If present, objects will be filtered on property with this name.
	 * @param  $pattern If present, objects will be filtered on property with this value.
	 * @param  $scope Scope [global|vdom|both*]
	 * @param  $excludeDefaultValues Exclude properties/objects with default value
	 * @param  $action default: Return the CLI default values for entire CLI tree.
	 * meta: Return meta data for a specific object, table, or the entire CLI tree.
	 * schema: Return schema for entire CLI tree.
	 *
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function getAllWirelessControllerWtpProfile(
		bool $datasource = null,
		int $start = null,
		int $count = null,
		bool $with_meta = null,
		bool $with_contents_hash = null,
		bool $skip = null,
		array $format = null,
		array $filter = null,
		string $key = null,
		string $pattern = null,
		string $scope = null,
		bool $excludeDefaultValues = null,
		string $action = null,
		array $vdom = null
	) : stdClass {
		return $this->curlRequest('GET', '/Configuration/wireless-controller/wtp-profile', NULL, ['datasource'=>$datasource, 'start'=>$start, 'count'=>$count, 'with_meta'=>$with_meta, 'with_contents_hash'=>$with_contents_hash, 'skip'=>$skip, 'format'=>$format, 'filter'=>$filter, 'key'=>$key, 'pattern'=>$pattern, 'scope'=>$scope, 'exclude-default-values'=>$excludeDefaultValues, 'action'=>$action, 'vdom'=>$vdom], NULL);
	}


	/**
	 * Create object(s) in this table.
	 *  Access Group: wifi
	 * @route  POST /wireless-controller/wtp-profile
	 * @param  $body Possible parameters to go in the body for the request
	 * @param  $vdom Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.
	 * The URL parameter is one of:
	 * vdom=root (Single VDOM)
	 * vdom=vdom1,vdom2 (Multiple VDOMs)
	 * vdom=* (All VDOMs)
	 *
	 * @param  $action If supported, an action can be specified.
	 * _clone_: Clone this specific resource.
	 * When *action=clone* is set, the extra parameters *nkey* must be provided.
	 * __*Note:*__ If this parameter is provided when not supported, the action will be ignored and an “invalid request” error will be returned.
	 *
	 * @param  $nkey  If *action=clone*, use *nkey* to specify the ID for the new resource to be created.
	 * For example, to clone `address1` to `address1_clone`, use:
	 * __action=clone&nkey=address1_clone__
	 * __*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.
	 *
	 * @return stdClass Return the firewall's response as an object.
	 */
	public function addWirelessControllerWtpProfile(
		stdClass $body,
		array $vdom = null,
		string $action = null,
		string $nkey = null
	) : stdClass {
		return $this->curlRequest('POST', '/Configuration/wireless-controller/wtp-profile', NULL, ['vdom'=>$vdom, 'action'=>$action, 'nkey'=>$nkey], $body);
	}
}
